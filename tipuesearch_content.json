{"pages":[{"url":"https://mcdona1d.me/About.html","text":"关于 这个博客 本博客为mcdona1d的个人博客,用于记录，分享，总结，吐槽使用,欢迎各位来访~~ 博客刚从CSDN上迁移过来，还有诸多不完善之处，后期会逐步解决 对前端网页方向一直没有深入涉及，这是算个开头，Pelican+Bootstrap3的方案也还有好多的潜能没有发挥出来，继续学习，继续改进 博客架设在DigitalOcean的San Francisco数据中心上，由Pelican生成，使用百度云加速CDN 关于 我 我叫 张骞 1994年 3月生 目前就读于 北京交通大学海滨学院 计算机科学系 一个即将升入大四寻找实习的大三狗 一个对Linux有着极大兴趣，却又觉得不适合开发的人 想去干 运维 爱上了Python-- Life is short ,you need python 喜欢Google强大的软件，欣赏诺基亚领先的工业设计，欣赏一切美好的事物 印象笔记重度用户，结合马克飞象来写博客记笔记 使用2Do安排自己的生活 热爱iPhone上杰出的app，习惯去揣摸开发者的思路，体会其中的快乐 每天睁眼第一件事居然是去AppStore更新App 折腾狂，从折纸到烙铁到斧子，刷手机刷路由刷汽车，喜欢 榨干 每一件产品的潜力 总喜欢去体验最新鲜的事物，可能因为 我还年轻 联系我 你可以通过以下方式联系到我 Phone: +86 18612446430 QQ: 329703622 E-mail: q329703622@hotmail.com ps:Gmail爱不起了，为了即将的Windows 10，暂时把Microsoft服务作为自己的主要服务了，Hotmail在iPhone上的邮件推送要明显快于Gmail 也可以通过以下方式找到我的痕迹 Github: https://github.com/mcdona1d Linkedin: https://www.linkedin.com/pub/%E9%AA%9E-%E5%BC%A0/b4/172/432 CSDN: http://blog.csdn.net/u010027419 Weibo: http://weibo.com/234773130 简历 如果你对我感兴趣，欢迎下载我的简历，给我提供一份实习或工作 我的简历","tags":"pages","title":"About"},{"url":"https://mcdona1d.me/Log.html","text":"关于 啊啊啊，折腾了这么久了在不都记下来怕是要忘呀，赶紧的一步步把博客搭建的过程和依然存在的问题记录下来 Log 2015-12-16 全站启用https（不过好象没什么用～） 2015-10-29 修复标签云不加载的问题 2015-07-20 Apache改为更适合静态页面的Nginx轻量服务器,增加404页面 2015-06-29 sitemap提交 robot.txt更新 引入Google站长管理及Baidu站长管理 2015-06-27 网页发布流程优化 2015-06-27 Disqus评论系统修复 2015-06-22 网站主题优化汉化 2015-06-19 网站正式上线 2015-06-15 迁移CSDN博客 依然存在的或需要继续完善改进的问题 问题 Pelican 不能把我的markdown语法的表格显示出来（linux-markdown问题） 改进 继续研究插件库，找到合适的插件研究明白后添加进来 可能现在还没有把该网页提交给搜索引擎爬虫 已解决 右侧的sidebar的标签云不工作 Disqus不工作","tags":"pages","title":"Log"},{"url":"https://mcdona1d.me/编译ngrok实现内网透穿 代替花生棒.html","text":"本文中依赖的主要环境 Server : CentOS 6.5 X64 Client : RaspberryPi ARM Debian 7 主域名 : mcdona1d . me ngrok 子域名 : ngrok . mcdona1d . me 首先安装必要的工具： yum install -y openssl git mercurial bzr subversion 以下这套工具是Linux的开发工具套件，但此程序为 Go 语言编写，用的也是 Go 的编译器。我不知道有没有用，90%可能此次编译没用。但是我是早就装过了，所以如果出问题的话就装一下吧 yum groupinstall -y \"Development tools\" 服务端 获取 ngrok 源码 git clone https://github.com/inconshreveable/ngrok.git ngrok cd ngrok 以下命令基本都在ngrok目录下执行 生成必要的证书文件 生成并替换源码里默认的证书，注意域名修改为你自己的。 之后编译出来的服务端客户端会基于这个证书来加密通讯，保证了安全性 export NGROK_DOMAIN=\"mcdona1d.me\" openssl genrsa -out base.key 2048 openssl req -new -x509 -nodes -key base.key -days 10000 -subj \"/CN= $ NGROK_DOMAIN \" -out base.pem openssl genrsa -out server.key 2048 openssl req -new -key server.key -subj \"/CN= $ NGROK_DOMAIN \" -out server.csr openssl x509 -req -in server.csr -CA base.pem -CAkey base.key -CAcreateserial -days 10000 -out server.crt cp base.pem assets/client/tls/ngrokroot.crt cp server.crt assets/server/tls/snakeoil.crt cp server.key assets/server/tls/snakeoil.key ngrok通过bindata将ngrok源码目录下的 assets 目录（资源文件）打包到可执行文件( ngrokd 和 ngrok )中去， assets/client/tls 和 assets/server/tls 下分别存放着用于 ngrok 和 ngrokd 的默认证书文件，我们需要将它们替换成我们自己生成的。因此 这一步务必放在编译可执行文件之前 编译 配置编译环境 首先需要配置 Go 语言编译环境 从此网站下载 Go 语言源码 http://www.golangtc.com/download 根据我的系统我使用的是 go1.4.2.linux-amd64.tar.gz 将解压后的 go 文件夹转移到 /usr/local/ 目录下 cd /root wget http://www.golangtc.com/static/go/go1.4.2/go1.4.2.linux-amd64.tar.gz tar -zxvf go1.4.2.linux-amd64.tar.gz mv go/ /usr/local/ cd /root/ngrok/ 然后将 cp /usr/local/go/bin/* /usr/bin/ 如果提示覆盖，则摁y同意 设置编译变量 以下三条环境变量根据你的实际情况来设置 export GOOS=\"linux\" GOARCH=\"amd64\" GOPATH=/root/ngrok/ make release-server 如果一切正常而且你的服务器在国外，并且是CentOS7且最近 yum update 过的话， ngrok/bin 目录下应该有 ngrok 、 ngrokd 两个可执行文件。但是一般不会那么正常~ 首先程序编译会从 GoogleCode 下载 log4go 依赖，一般情况是不方便下载的。解决办法是 vi /root/ngrok/src/ngrok/log/logger.go 将第四行的 log \"code.google.com/p/log4go\" 换成这个 log \"github.com/keepeye/log4go\" 解决这个问题之后继续编译，程序可能会卡在这一步 仔细研究前辈的编译过程之后，得知这一步居然要求 Git 的版本！ 此时我的 Git 版本为 1.7.1 ，据说需要升级到 1.7.9.5 以上。 以下是我 CentOS 6.5 的升级方法 rpm -- import http : // apt . sw . be / RPM - GPG - KEY . dag . txt rpm - i http : // pkgs . repoforge . org / rpmforge - release / rpmforge - release - 0.5 . 3 - 1. el6 . rf . x86_64 . rpm vi / etc / yum . repos . d / rpmforge . repo 找到 [ rpmforge - extras ] ，把 enabled = 0 改成 enabled = 1 修改完成后 yum update git 升级完成后版本为 1.7.12.4 ，继续执行编译，即可顺利编译完成 sudo make release-server 运行 /root/ngrok/bin/ngrokd -domain = \"mcdona1d.me\" -httpAddr = \":8000\" 出现以上字样没有报错即为 成功 配置开机自动运行 将以下代码粘贴入 rc.local 保存即可 vi /etc/rc.local /root/ngrok/bin/ngrokd -domain = \"mcdona1d.me\" -httpAddr = \":8000\" > /var/log/ngrok.log & 客户端 客户端根据实际情况编译，下面给出四种客户端的编译命令，具体X86或X86_64或arm根据自己情况更改 cd /usr/local/go/src 以下四条根据情况选择一条执行 GOOS = linux GOARCH = amd64 ./make.bash #Linux 64位 GOOS = darwin GOARCH = amd64 ./make.bash #MacOS 64位 GOOS = windows GOARCH = 386 ./make.bash #Windows 32位 GOOS = linux GOARCH = arm ./make.bash #Linux ARM架构 适用于树莓派 等待执行完毕后回到ngrok目录 cd /root/ngrok export GOOS = \"linux\" GOARCH = \"arm\" GOPATH = /root/ngrok/ make release-client 执行完毕后会在 /root/ngrok/bin/linux_arm 生成适用于 arm 架构的树莓派可用的客户端 ngrok 将 ngrok 拷贝到 client 服务器中并 chmod +x ngrok 增加执行权限，并创建一个配置文件 ngrok.cfg ，内容如下： server_addr: \"mcdona1d.me:4443\" trust_host_root_certs: false 执行ngrok： -subdomain= 为你的二级域名 80 为client需要映射到公网的端口 ./ngrok -config = ./ngrok.cfg -subdomain = ngrok 80 online即为成功 需要最后提及的是， ngrok 会同时请求 ngrok.mcdona1d.me 和 mcdona1d.me 的解析，因为我两个域名解析地址不同，所以一直失败。但是我又不能把主域名更改解析地址，遂在host文件中手动添加一行解析地址，问题解决，内网透穿成功 参考 搭建自己的ngrok服务 搭建 ngrok 服务实现内网穿透 自行编译ngrok服务端客户端，替代花生壳，跨平台 自编译搭建ngrok服务实现内网穿透 搭建ngrok服务器实现内网穿透及映射 在CentOS上把Git从1.7.1升级到1.7.12.4","tags":"tech","title":"CentOS7 编译ngrok实现内网透穿 代替花生棒"},{"url":"https://mcdona1d.me/OpenWRT + Raspberry Pi 智能网关.html","text":"[toc] 本文需要已具备的因素 基于OpenWRT的路由器（我的设备为Newifi Y1） 树莓派（树莓派2） OpenVPN账户（ DigitalOcean 自己搭建） 初始化 在树莓派上安装OpenVPN apt-get install openvpn 启动OpenVPN 拷贝OpenVPN的五个文件到 /etc/openvpn/config 中(没有的话自己新建文件夹) 修改.ovpn文件中的ca、cert、key 三项后对应位置为实际对应的位置 openvpn --config /etc/openvpn/config/*.ovpn & 一般出现此条信息即为成功 连接成功后 ifconfig 检查是否出现名为 tun0 的网卡 开启树莓派转发 vi /etc/sysctl.conf 取消注释以下一条并修改其参数 net.ipv4.ip_forward=1 执行 sysctl -p 使刚才的修改立即生效 配置iptables，使系统强制转发所有流量 iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -t nat -I POSTROUTING -s 192.168.1.0/24 -j MASQUERADE iptables-save 配置路由器 树莓派分配静态IP 网路-->DHCP/DNS-->静态地址分配 为Google DNS增加静态路由 网路-->静态路由-->路由表 将Google DNS转发至刚才为树莓派分配的静态地址中 树莓派设置路由 /sbin/route add -net 8.8.0.0/16 dev tun0 至此基础环境搭建完毕 处理新规则流程 以自动处理Google为例讲解此流程 路由器 nslookup www.google.com 8.8.8.8 得到未被污染的IP地址 编辑dnsmasq vi /etc/dnsmasq.conf 在末尾增加以下条目 server=/google.com/8.8.8.8 使Google域名使用8.8.8.8进行解析 添加完毕后重启dnsmasq /etc/init.d/dnsmasq restart 将未被污染的ip地址添加到之前修改过的静态路由表中 保存应用生效 树莓派 增加路由规则 /sbin/route add -net 74.125.0.0/16 dev tun0 检查路由规则 netstat -rn 即可看到当前路由规则 使用以下命令检查是否可以打开网页 curl www.google.com 如获取到 <HTML><HEAD><meta http-equiv= \"content-type\" content= \"text/html;charset=utf-8\" > <TITLE> 302 Moved </TITLE></HEAD><BODY> <H1> 302 Moved </H1> The document has moved <A HREF= \"http://www.google.com.hk/url?sa=p&amp;hl=zh-CN&amp;pref=hkredirect&amp;pval=yes&amp;q=http://www.google.com.hk/%3Fgws_rd%3Dcr&amp;ust=1449738375234893&amp;usg=AFQjCNEvR5Yi7Es8o3Uk6P2TlyC7uPRLZA\" > here </A> . </BODY></HTML> 即为在树莓派上已经通过OpenVPN转发此流量 测试 在路由器上继续执行 curl www.google.com 如依然可以返回刚才的结果，则系统解析转发正常 FAQ 其实此时Google依然无法打开，从刚才获取到的html文件中也可看出，Google被重定向到离你的服务器最近的机房中，此时需要继续分析，添加规则。本文仅提供思路，方法大同小异 因为涉及到DNS缓存、浏览器缓存等问题可能依然会出现各种奇葩问题，需耐心寻找解决办法 and Google it 正常情况下，OpenVPN一天内被封杀端口属于正常情况，具体的信息为 TLS auth error ，更换端口可暂时解决 附录 提供两种顺利使用OpenVPN方法 ssh隧道双重加密 修改OpenVPN服务端配置文件使其为tcp模式 修改客户端配置文件使其为tcp模式并且修改服务器地址为 localhost 使用如下命令建立ssh隧道将服务器端口映射至本机 ssh -L 1194:localhost:1194 user@webserver 启动VPN客户端连接 使用shadowsocks代理 SS提供了OpenVPN使用ss代理连接的办法 官方文档的地址为 https://github.com/shadowsocks/shadowsocks/wiki/Connect-to-OpenVPN-over-Shadowsocks 具体办法是： 服务端启动ss服务及OpenVPN服务 客户端启动ss服务 sslocal -c /etc/shadowsocks.json -d start 在OpenVPN的.ovpn文件末尾加上 socks-proxy 127.0.0.1 1080 route SHADOWSOCKS_SERVER_IP 255.255.255.255 net_gateway 即可使用shadowsocks代理OpenVPN流量 使用obfsproxy混搅流量 使用stunnel混搅流量","tags":"tech","title":"OpenWRT + Raspberry Pi 按规则配置透明网关"},{"url":"https://mcdona1d.me/CentOS7 配置OpenVPN服务.html","text":"Server 安装必要的软件包 yum install -y openvpn easy-rsa openssl openssl-devel lzo lzo-devel 创建工作环境 cp /usr/share/doc/openvpn-2.3.8/sample/sample-config-files/server.conf /etc/openvpn/ 修改easy-rsa变量 在生成证书之前，先要对2.0目录中的vars文件进行修改 vars文件存储的是一些用户变量设置信息，每次生成证书都会使用到其中的某些变量。我们着重建议你关注红色矩形框内的变量，并选择性地对其进行修改(可以不修改这些参数，但不要把这些参数留空)，其实不改vars这个文件，也不影响VPN的运行 找到\"export KEY_SIZE=\"这行，根据情况把1024改成2048或者4096 下面是一些用户相关信息配置 export KEY_COUNTRY = \"CN\" 所在国家 export KEY_PROVINCE = \"BJ\" 所在省 export KEY_CITY = \"Beijing\" 所在城市 export KEY_ORG = \"xxx\" 所在组织 export KEY_EMAIL = \"xxx@xxx.cn\" 邮箱地址 export KEY_OU： \"xxx\" 机构单位或部门名称 生成CA证书 保持当前目录为OpenVPN根目录/easy-rsa/2.0。然后依次执行下列命令： 初始化命令，用于设置后续命令所需的相关变量信息 . ./vars 清除之前创建的所有证书和密钥 ./clean-all 生成CA证书和密钥 ./build-ca 证书的用户信息可以根据需要自行输入。如果不输入、直接回车，则表示该字段使用\"[]\"中的默认值(也就是前面vars文件中设置的参数值)；如果输入\".\"，则表示该字段留空。在这里需要注意Common Name字段，这相当于证书的\"用户名\"，请确保每个证书的Common Name字段是唯一的。 生成的证书和密码默认均存放在当前目录的子文件夹keys中。 生成服务器端证书 服务端及客户端的证书和密钥都必须由OpenVPN服务器上的easy-rsa生成 ./build-key-server server 生成服务器端所需的证书和密钥 先输入证书的相关信息，并在最后输入两次\"y\"确认生成即可 生成客户端证书 ./build-key clientName clientName为自定义的客户端名称(例如：client1、client2、jim、tom)。 如果需要为多个客户端生成证书，只需要分别执行多次即可。 生成 Diffie Hellman交换密钥 Diffie Hellman交换密钥是一种安全协议，用以对数据进行加密 ./build-dh 生成TLS-auth密钥 这一步骤是可选操作。OpenVPN提供了TLS-auth功能，可以用来抵御Dos、UDP端口淹没攻击。出于安全考虑，你可以启用该功能；启用该功能， 执行命令 openvpn --genkey --secret keys/ta.key 来生成TLS-auth所需的密钥文件。 到这里，我们的证书生成就告一段落了。如果你以后想要生成新的客户端或执行其他操作，只需要先执行命令source ./vars，然后执行相应的命令即可，例如./build-key client2。 最后，我们来看看我们一共生成了哪些证书和密钥。 CA证书和密钥 客户端client1的证书和密钥， Diffie Hellman交换密钥 (如果你的KEY_SIZE=1024，则该文件名称为dh1024.pem)。 服务器端证书和密钥。 启用tls-auth所需的文件。 编写配置文件 众所周知，OpenVPN虽然可以分为客户端和服务器，不过它们的安装程序是完全一样的，只是通过不同的证书和配置文件来进行区分。在这里，我们先在OpenVPN主目录下创建一个config目录，并将其所需的证书和密钥文件拷贝到该目录中。 其中，服务器端需要用到的文件有： ca.crt ca.key dh2048.pem ( 如果最初的变量KEY_SIZE设为1024，这里就是dh1024.pem ) server.crt server.key ta.key ( 如果不开启tls-auth，则无需该文件 ) 客户端client1需要用到的文件有： ca.crt client1.crt client1.key ( 名称client1根据个人设置可能有所不同 ) ta.key ( 如果不开启tls-auth，则无需该文件 ) 在这里，我们以OpenVPN服务器端为例来演示上述操作流程。 创建config目录 mkdir /usr/local/openvpn-2.3.4/config 复制证书和密钥文件到config目录 cp keys/ca.crt keys/ca.key keys/server.crt keys/server.key keys/dh2048.pem keys/ta.key /usr/local/openvpn-2.3.4/config 此外，还需要为服务器和每个客户端的config目录分别编写一个配置文件，服务器端的配置文件为 server.conf ，客户端的配置文件为 client.ovpn 这两个配置文件该如何编写呢？OpenVPN已经在sample/sample-config-files子目录中为我们提供了相关的示例文件server.conf和client.conf，并且配置文件中的每个配置选项均有详细的英文说明(配置文件中\"#\"或\";\"开头的均为注释内容)。 现在，我们先将server.conf文件拷贝到config目录中，然后再对其进行修改。 转到simple-config-files目录 cd /usr/local/openvpn-2.3.4/sample/sample-config-files 复制server.conf到config目录中 cp server.conf /usr/local/openvpn-2.3.4/config 服务端配置文件server.conf local 192.168.1.106 #指定监听的本机IP(因为有些计算机具备多个IP地址)，该命令是可选的，默认监听所有IP地址。 port 1194 #指定监听的本机端口号 proto udp #指定采用的传输协议，可以选择tcp或udp dev tun #指定创建的通信隧道类型，可选tun或tap ca ca.crt #指定CA证书的文件路径 cert server.crt #指定服务器端的证书文件路径 key server.key #指定服务器端的私钥文件路径 dh dh2048.pem #指定迪菲赫尔曼参数的文件路径 server 10.0.0.0 255.255.255.0 #指定虚拟局域网占用的IP地址段和子网掩码，此处配置的服务器自身占用10.0.0.1。 ifconfig-pool-persist ipp.txt #服务器自动给客户端分配IP后，客户端下次连接时，仍然采用上次的IP地址(第一次分配的IP保存在ipp.txt中，下一次分配其中保存的IP)。 tls-auth ta.key 0 #开启TLS-auth，使用ta.key防御攻击。服务器端的第二个参数值为0，客户端的为1。 keepalive 10 120 #每10秒ping一次，连接超时时间设为120秒。 comp-lzo #开启VPN连接压缩，如果服务器端开启，客户端也必须开启 client-to-client #允许客户端与客户端相连接，默认情况下客户端只能与服务器相连接 persist-key persist-tun #持久化选项可以尽量避免访问在重启时由于用户权限降低而无法访问的某些资源。 status openvpn-status.log #指定记录OpenVPN状态的日志文件路径 verb 3 #指定日志文件的记录详细级别，可选0-9，等级越高日志内容越详细 客户端配置文件client.ovpn client #指定当前VPN是客户端 dev tun #必须与服务器端的保持一致 proto udp #必须与服务器端的保持一致 remote 192.168.1.106 1194 #指定连接的远程服务器的实际IP地址和端口号 resolv-retry infinite #断线自动重新连接，在网络不稳定的情况下(例如：笔记本电脑无线网络)非常有用。 nobind #不绑定特定的本地端口号 persist-key persist-tun ca ca.crt #指定CA证书的文件路径 cert client1.crt #指定当前客户端的证书文件路径 key client1.key #指定当前客户端的私钥文件路径 ns-cert-type server #指定采用服务器校验方式 tls-auth ta.key 1 #如果服务器设置了防御DoS等攻击的ta.key，则必须每个客户端开启；如果未设置，则注释掉这一行； comp-lzo #与服务器保持一致 verb 3 #指定日志文件的记录详细级别，可选0-9，等级越高日志内容越详细 启动服务 openvpn server.conf & Client RaspberryPi RaspberryPi OS: 2015-05-05-raspbian-wheezy 安装OpenVPN apt-get install openvpn 拷贝OpenVPN的五个文件到 /etc/openvpn/ 中 修改 .ovpn 文件中的 ca 、 cert 、 key 三项后对应位置为实际对应的位置 openvpn /etc/openvpn/*.ovpn & Windows 在 https://openvpn.net/ 下载并安装OpenVPN官方客户端 将 ca.crt 、 ca.key 、 client.crt 、 client.ket 、 client.ovpn 五个配置文件拷入 C:\\Program Files\\OpenVPN\\config 中 使用管理员权限运行OpenVPN","tags":"tech","title":"CentOS7 配置OpenVPN服务"},{"url":"https://mcdona1d.me/Django 入门：搭建博客雏形.html","text":"本文中的操作环境： Ubuntu 14.04.1 Python 2.7 Django 1.8.5 [toc] 创建项目 django-admin.py startproject mysite 工程目录结构： └─ mysite ├── manage.py └── mysite ├── __init__.py ├── settings.py ├── urls.py └── wsgi.py manage.py ----- Django项目里面的工具，通过它可以调用django shell和数据库等。 settings.py ----- 包含了项目的默认设置，包括数据库信息，调试标志以及其他一些工作的变量。 urls.py ----- 负责把URL模式映射到应用程序。 初始化后台数据库 python 自带SQLite数据库，Django支持各种主流的数据库，这里为了方便推荐使用SQLite，如果使用其它数据库请在settings.py文件中设置。 切换到mysite创建数据库： root@ubuntu:~/django/mysite $ python manage.py migrate Operations to perform: Synchronize unmigrated apps: staticfiles, messages Apply all migrations: admin, contenttypes, auth, sessions Synchronizing apps without migrations: Creating tables... Running deferred SQL... Installing custom SQL... Running migrations: Rendering model states... DONE Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying sessions.0001_initial... OK 创建完成后，项目根目录会生成 db.sqlite3 文件 设置admin应用 admin 是Django 自带的一个后台管理系统。 创建admin帐号 root@ubuntu:~/django/mysite $ python manage.py createsuperuser Username ( leave blank to use 'root' ) : admin Email address: admin@admin.com Password: Password ( again ) : Superuser created successfully. python 1.7开始引入了migrate模块替换了之前的syncdb功能，此外用户创建也需要独立操作 在我们创建django项目时，admin就已经创建，打开 mysite/mysite/urls.py 文件： from django.conf.urls import include , url from django.contrib import admin urlpatterns = [ url ( r'&#94;admin/' , include ( admin . site . urls )), ] 启动django容器 root@ubuntu:~/django/mysite $ python manage.py runserver 0.0.0.0:8000 Performing system checks... System check identified no issues ( 0 silenced ) . October 20, 2015 - 10:41:02 Django version 1.8.5, using settings 'mysite.settings' Starting development server at http://0.0.0.0:8000/ Quit the server with CONTROL-C. 访问后台应用 http://127.0.0.1:8000/admin 输入第一步创建的用户名和密码，即可登录网站后台 创建blog应用 在mysite目录下创建blog应用 cd mysite python manage.py startapp blog 目录结构： blog ├── admin.py ├── __init__.py ├── migrations │ └── __init__.py ├── models.py ├── tests.py └── views.py 添加blog应用，打开 mysite/mysite/settings.py 文件： # Application definition INSTALLED_APPS = ( 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'blog' , ) 在列表末尾，添加blog 应用 为blog应用设计Model(数据库表) blog目录下的models.py文件，是定义blog数据结构的地方 设计model 打开 mysite/blog/models.py 文件进行修改： from django.db import models from django.contrib import admin # Create your models here. class BlogsPost ( models . Model ): title = models . CharField ( max_length = 150 ) body = models . TextField () timestamp = models . DateTimeField () admin . site . register ( BlogsPost ) 再次初始化数据库 root@ubuntu:~/django/mysite $ python manage.py makemigrations blog Migrations for 'blog' : 0001_initial.py: - Create model BlogsPost root@ubuntu:~/django/mysite $ python manage.py migrate Operations to perform: Synchronize unmigrated apps: staticfiles, messages Apply all migrations: admin, blog, contenttypes, auth, sessions Synchronizing apps without migrations: Creating tables... Running deferred SQL... Installing custom SQL... Running migrations: Rendering model states... DONE Applying blog.0001_initial... OK 再次runserver启动服务，访问admin后台，创建文章 登陆成功后会发现多出了blog一栏 选择Add 输入博客标题，正文、日期时间、点击Save创建博客 设置admin 的BlogsPost界面 打开 mysite/blog/models.py 文件，做如下修改： from django.db import models from django.contrib import admin class BlogsPost ( models . Model ): title = models . CharField ( max_length = 150 ) body = models . TextField () timestamp = models . DateField () class BlogsPostAdmin ( admin . ModelAdmin ): list_display = ( 'title' , 'timestamp' ) admin . site . register ( BlogsPost , BlogsPostAdmin ) 创建BlogPostAdmin类，继承admin.ModelAdmin父类，以列表的形式显示BlogPost的标题和时间 刷新后页面产生变化 创建blog的公共部分 从Django的角度看，一个页面具有三个典型的组件： 一个模板（template）：模板负责把传递进来的信息显示出来 一个视图（view）：视图负责从数据库获取需要显示的信息 * 一个URL模式：它负责把收到的请求和你的试图函数匹配，有时候也会向视图传递一些参数 创建模板 在blog项目下创建templates目录（ mysite/blog/templates/ ）,在目录下创建模板文件 index.html ，内容如下： {% for blog in blog_list %} <h2> {{ blog.title }} </h2> <p> {{ blog.timestamp }} </p> <p> {{ blog.body }} </p> {% endfor %} 创建视图函数 打开 mysite/blog/views.py 文件： #coding=utf-8 from django.shortcuts import render from blog.models import BlogsPost from django.shortcuts import render_to_response def index ( request ): blog_list = BlogsPost . objects . all () return render_to_response ( 'index.html' ,{ 'blog_list' : blog_list }) blog_list = BlogPost.objects.all() ：获取数据库里面所拥有BlogPost对象 render_to_response() 返回一个页面(index.html)，顺带把数据库中查询出来的所有博客内容（blog_list）也一并返回 创建blog的URL模式 在 mysite/mysite/urls.py 文件里添加blog的url： #coding=utf-8 from django.conf.urls import patterns , include , url from django.contrib import admin urlpatterns = patterns ( '' , url ( r'&#94;admin/' , include ( admin . site . urls )), url ( r'&#94;index/$' , 'blog.views.index' ), ) 再次runserver启动服务，访问blog应用 http://127.0.0.1:8000/index 页面如下： 此时可以继续到admin后台添加blog，刷新这个页面来显示新添加的blog 添加样式及美化blog 创建基础模板 在 mysite/blog/templates 目录里创建 base.html 的模板： <html> <head> <style type= \"text/css\" > body { color : #efd ; background : #453 ; padding : 0 5em ; margin : 0 } h1 { padding : 2em 1em ; background : #675 } h2 { color : #bf8 ; border-top : 1px dotted #fff ; margin-top : 2em } p { margin : 1em 0 } </style> </head> <body> <h1> Django Blog </h1> <h3> Blog Title </h3> {% block content %} {% endblock %} </body> </html> 修改主页模板 修改 index.html 模板，让它引用 base.html 模板和它的 content 块 {% extends \"base.html\" %} {% block content %} {% for blog in blog_list %} <h2> {{ blog.title }} </h2> <p> {{ blog.timestamp }} </p> <p> {{ blog.body }} </p> {% endfor %} {% endblock %} 再次刷新博客页面： 附录：简单Django项目 此项目涉及简单的增删改查，可以做进阶入门使用 Github : DjangoTest","tags":"tech","title":"Django 入门：搭建博客雏形"},{"url":"https://mcdona1d.me/Openwrt 路由中继备忘.html","text":"设置自己路由器lan口IP，不能跟上级路由相同 在无线标签下点击\"扫描网络\" 在新出现的界面中，会列出你附近的无线网络。点击你需要中继的网络右边的\"加入网络\" 4.在接下来的界面中，输入上级路由的无线密码(如有密码)，选择\"wan\"网络（默认应该就是），然后点击\"提交\" 下一页，直接点击\"保存&应用\" （没有截图） 此时，返回\"网络-接口\"页面，应看到新创建的WWAN接口成功获取到上级的DHCP地址，说明连接成功。如 配置完成，现在已经可以访问网络 附：无墙网络环境图，终端零设置","tags":"tech","title":"Openwrt 路由中继备忘"},{"url":"https://mcdona1d.me/就这么开始上班了.html","text":"2015.7.15 21:43 这一阵子，分两次面试了四场，第一场学习氛围好，但是感觉工资有些少，初来乍到，自己倒是也没什么概念，感觉上3000够花，4000理想，5000太棒，很感谢面试我的那个哥哥，让我经历了一次非常完整的面试。第二场可能给的薪资会高一些，但是环境特别的不理想，工作乏味，学不到东西。第三场面试，上来就给了一张笔试题，自己没有系统的学习过python这门语言，小后悔小学期没有上刘海洋老师讲的python。第四场面试，一个非常有魅力的哥哥和我聊，过程非常的放松，也让我丝毫没感觉到什么压力。第三场面试和第四场居然都考到了一个两个链表是否交叉的算法。作为一个从来没在实际应用过算法的同学来说，也从来没意识到，接下来的工作，就是真正要应用算法的场景。 作为第一份实习，很满意，职位满意，工作氛围满意，工作环境满意，薪资满意，下周一也就要正式的开始人生中第一份工作了。 现在还要找房子，搬行李，买东西，一切都是新的，未知的 但是一切的一切，都是和自己心里的方向完全相同的，好像从来都是，心里想的，总会实现 开始奋斗吧，这也算是 北漂 了么 接下来 每天学习练习VIM的操作 研究研究nginx+lua 好好奋斗，享受每一天","tags":"life","title":"就这么开始上班了"},{"url":"https://mcdona1d.me/解决Win7 ip-网关无法保存问题.html","text":"缘由 静态ip地址更改过一次之后，再改回来莫名其妙的保存不上网关了，保存之后再查看均会自动清空，搜索得以下答案，可以顺利解决 解决 点击左下角的WIN图标，输入CMD然后右击使用管理员身份运行，打开DOS模式窗口 在DOS命令行提示符下直接输入： netsh winsock reset ，然后回车，会提示需要重启，不要管它 在DOS命令行提示符下直接输入： netsh int ip reset reset.log ，然后回车，提示重新启动计算机完成此操作 关闭DOS窗口，重新启动计算机，问题解决","tags":"tech","title":"解决Win7 ip/网关无法保存问题"},{"url":"https://mcdona1d.me/CentOS 7 安装l2tp vpn，配置客户端，并使用net-speeder优化速度.html","text":"服务端 安装环境：DigitalOcean 系统：CentOS 7 x64 前言 本配置过程依赖于脚本而来，脚本执行后不成功，故手动分步执行，比较容易找到错误并且修正 安装依赖的组件 yum -y update yum install -y openswan ppp xl2tpd wget 创建ipsec.conf配置文件 rm -f /etc/ipsec.conf nano /etc/ipsec.conf 输入以下内容，并替换 $serverip 为你的服务器ip地址，然后删掉注释内容。 完成后ctrl+o回车保存，ctrl+x退出 # /etc/ipsec.conf - Libreswan IPsec configuration file # This file: /etc/ipsec.conf # # Enable when using this configuration file with openswan instead of libreswan #version 2 # # Manual: ipsec.conf.5 # basic configuration config setup # NAT-TRAVERSAL support, see README.NAT-Traversal nat_traversal = yes # exclude networks used on server side by adding %v4:!a.b.c.0/24 virtual_private = %v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12 # OE is now off by default. Uncomment and change to on, to enable. oe = off # which IPsec stack to use. auto will try netkey, then klips then mast protostack = netkey force_keepalive = yes keep_alive = 1800 conn L2TP-PSK-NAT rightsubnet = vhost:%priv also = L2TP-PSK-noNAT conn L2TP-PSK-noNAT authby = secret pfs = no auto = add keyingtries = 3 rekey = no ikelifetime = 8h keylife = 1h type = transport left = $serverip //替换为你的IP leftid = $serverip //替换为你的IP leftprotoport = 17/1701 right = %any rightprotoport = 17/%any dpddelay = 40 dpdtimeout = 130 dpdaction = clear 设置预共享密钥配置文件 rm -f /etc/ipsec.secrets nano /etc/ipsec.secrets 粘贴以下两行内容，其中： $serverip 替换为你的服务器ip $mypsk 替换为你的psk密钥，之后建立连接时会用到 完成后ctrl+o回车保存，ctrl+x退出 # include /etc/ipsec.d/*.secrets $ serverip %any: PSK \" $ mypsk \" 创建xl2tpd.conf配置文件 mkdir -p /etc/xl2tpd rm -f /etc/xl2tpd/xl2tpd.conf nano /etc/xl2tpd/xl2tpd.conf 输入以下内容，并替换 $serverip 为你的服务器ip地址，然后删掉注释内容。 完成后ctrl+o回车保存，ctrl+x退出 ; ; This is a minimal sample xl2tpd configuration file for use ; with L2TP over IPsec. ; ; The idea is to provide an L2TP daemon to which remote Windows L2TP/IPsec ; clients connect. In this example, the internal ( protected ) network ; is 192.168.1.0/24. A special IP range within this network is reserved ; for the remote clients: 192.168.1.128/25 ; ( i.e. 192.168.1.128 ... 192.168.1.254 ) ; ; The listen-addr parameter can be used if you want to bind the L2TP daemon ; to a specific IP address instead of to all interfaces. For instance, ; you could bind it to the interface of the internal LAN ( e.g. 192.168.1.98 ; in the example below ) . Yet another IP address ( local ip, e.g. 192.168.1.99 ) ; will be used by xl2tpd as its address on pppX interfaces. [ global ] ; ipsec saref = yes listen-addr = $serverip //替换为你的IP auth file = /etc/ppp/chap-secrets port = 1701 [ lns default ] ip range = 10.0.1.10-10.0.1.254 local ip = 10.0.1.1 refuse chap = yes refuse pap = yes require authentication = yes name = L2TPVPN ppp debug = yes pppoptfile = /etc/ppp/options.xl2tpd length bit = yes 创建options.xl2tpd配置文件 mkdir -p /etc/ppp rm -f /etc/ppp/options.xl2tpd nano /etc/ppp/options.xl2tpd 粘贴以下内容，无需修改 完成后ctrl+o回车保存，ctrl+x退出 #require-pap #require-chap #require-mschap ipcp-accept-local ipcp-accept-remote require-mschap-v2 ms-dns 8.8.8.8 ms-dns 8.8.4.4 asyncmap 0 auth crtscts lock hide-password modem debug name l2tpd proxyarp lcp-echo-interval 30 lcp-echo-failure 4 mtu 1400 noccp connect-delay 5000 # To allow authentication against a Windows domain EXAMPLE, and require the # user to be in a group \"VPN Users\". Requires the samba-winbind package # require-mschap-v2 # plugin winbind.so # ntlm_auth-helper '/usr/bin/ntlm_auth --helper-protocol=ntlm-server-1 --require-membership-of=\"EXAMPLE\\VPN Users\"' # You need to join the domain on the server, for example using samba: # http://rootmanager.com/ubuntu-ipsec-l2tp-windows-domain-auth/setting-up-openswan-xl2tpd-with-native-windows-clients-lucid.html 创建chap-secrets配置文件，即用户列表及密码 rm -f /etc/ppp/chap-secrets nano /etc/ppp/chap-secrets 粘贴以下内容，其中： $username 替换为你的用户名， $password 替换为你的密码， 完成后ctrl+o回车保存，ctrl+x退出 # Secrets for authentication using CHAP # client server secret IP addresses $username l2tpd $password * 修改系统配置，允许IP转发 将下列语句执行 sysctl -w net.ipv4.ip_forward = 1 sysctl -w net.ipv4.conf.all.rp_filter = 0 sysctl -w net.ipv4.conf.default.rp_filter = 0 sysctl -w net.ipv4.conf. $eth .rp_filter = 0 sysctl -w net.ipv4.conf.all.send_redirects = 0 sysctl -w net.ipv4.conf.default.send_redirects = 0 sysctl -w net.ipv4.conf.all.accept_redirects = 0 sysctl -w net.ipv4.conf.default.accept_redirects = 0 然后： nano /etc/sysctl.conf 将下列语句粘贴至末尾,无需修改 完成后ctrl+o回车保存，ctrl+x退出 net.ipv4.ip_forward = 1 net.ipv4.conf.all.rp_filter = 0 net.ipv4.conf.default.rp_filter = 0 net.ipv4.conf. $eth .rp_filter = 0 net.ipv4.conf.all.send_redirects = 0 net.ipv4.conf.default.send_redirects = 0 net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.default.accept_redirects = 0 允许防火墙端口 nano /usr/lib/firewalld/services/l2tpd.xml 粘贴以下内容，无需修改 完成后ctrl+o回车保存，ctrl+x退出 <?xml version=\"1.0\" encoding=\"utf-8\"?> <service> <short> l2tpd </short> <description> L2TP IPSec </description> <port protocol= \"udp\" port= \"500\" /> <port protocol= \"udp\" port= \"4500\" /> <port protocol= \"udp\" port= \"1701\" /> </service> 重启防火墙 分别执行下列语句 firewall-cmd --permanent --add-service = l2tpd firewall-cmd --permanent --add-service = ipsec firewall-cmd --permanent --add-masquerade firewall-cmd --reload 允许开机启动 systemctl enable ipsec xl2tpd systemctl restart ipsec xl2tpd 重启服务器 重启服务器 测试ipsec ipsec verify 问题 此时可能会报诸多错误 比如服务未启动等等，根据错误信息修正错误 最重要的是，可能会出现vpn可以接入，但是不能打开网页 最终找到的问题在于iptables上，centos7的iptables比较怪异，而且直接写入规则并不能保存，最终解决办法只能是自己写一个sh脚本，开机自动执行。 解决办法 nano etc/rc.d/openl2tp.sh 然后复制以下文字，然后保存。 /sbin/iptables -A INPUT -p udp -m policy --dir in --pol ipsec -m udp --dport 1701 -j ACCEPT /sbin/iptables -A INPUT -p udp -m udp --dport 1701 -j ACCEPT /sbin/iptables -A INPUT -p udp -m udp --dport 500 -j ACCEPT /sbin/iptables -A INPUT -p udp -m udp --dport 4500 -j ACCEPT /sbin/iptables -A INPUT -p esp -j ACCEPT /sbin/iptables -A INPUT -m policy --dir in --pol ipsec -j ACCEPT /sbin/iptables -A FORWARD -d 10.0.1.0/24 -j ACCEPT /sbin/iptables -A FORWARD -s 10.0.1.0/24 -j ACCEPT /sbin/iptables -A FORWARD -i ppp+ -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT /sbin/iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT /sbin/iptables -t nat -A POSTROUTING -s 10.0.1.0/24 -o eth0 -j MASQUERADE 增加运行权限： chmod +x openl2tp.sh 然后还需要编辑 rc.local 文件，在末尾加上 /etc/rc.d/openiptables.sh 在之后，因为centos7已经不默认使用rc.d作为启动管理，要想使用rc.d 需要给rc.d加上权限 chmod +x /etc/rc.d/rc.local 尾声 重新执行 ipsec verify 观察结果，如果没有failed，则基本配置成功，尝试连入服务，测试结果 客户端 Windows 网络共享中心 设置连接或网络 连接到工作区 创建新连接 使用我的Internet连接 填入服务器地址 输入用户名密码 点连接，然后点跳过 在网络与共享中心左侧的更改适配器设置中，右击刚才新建的VPN链接，属性 在安全选项卡的VPN类型，选择L2TP/IPsec，点击高级设置，选择使用预共享密钥做身份验证，填入服务器配置的psk密码，点击确定 连接，测试 net-speeder优化速度 说明 作者在其博客说明了该方法的优劣: 这种方式下，直接优点是降低丢包率，直接缺点是耗费双倍流量。一些延伸影响是更容易触发快速恢复逻辑，避免了丢包时窗口缩减过快。一定程度也能提高网络速度。 在一台VPS上测试后发现，未开启时单线程下载、ssh管道速度在十几K级别。开启后可以达到平均300KB+的速度。效果非常明显。但对于不加速就可以跑满带宽的类型来讲（多线程下载），开启后反而由于多出来的无效流量，导致速度减半。所以对于多线程/高速链路，这个方案是不适合的。 安装 安装依赖库 先安装epel源 rpm -Uvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm 然后即可使用yum安装： yum install libnet libpcap libnet-devel libpcap-devel gcc 然后获取net-speeder wget https://github.com/snooda/net-speeder/archive/master.zip unzip master.zip cd net-speeder chmod +x build.sh ./build.sh 运行 编译完成后,一切顺利就能在当前目录下看到编译的net_speeder文件了. 按照项目说明: 使用方法(需要root权限启动）： 参数：./net_speeder 网卡名 加速规则（bpf规则） 最简单用法： # ./net_speeder venet0 \"ip\" 加速所有ip协议数据 这里,Digital Ocean的网卡名是eth0,于是执行 ./net_speeder eth0 \"ip\" 就可以运行了,具体可以使用ifconfig指令查看你的服务器网卡接口 然后复制到/usr/local/目录并设置开机自启动： mkdir /usr/local/net_speeder/ cp net_speeder /usr/local/net_speeder/net_speeder echo 'nohup /usr/local/net_speeder/net_speeder eth0 \"ip\" >/dev/null 2>&1 &' >> /etc/rc.local 该方案对Ikev2的vpn提速效果十分明显,但对Shadowsocks貌似并不显著(网上也有人Shadowsocks有效果的,此问题待进一步研究)。","tags":"tech","title":"CentOS 7 安装l2tp vpn，配置客户端，并使用net-speeder优化速度"},{"url":"https://mcdona1d.me/DigitalOcean CentOS 7 配置 shadowsocks 服务端及客户端及优化.html","text":"我的DigitalOcean邀请注册链接：[DigitalOcean注册](https://www.digitalocean.com/?refcode=69cda22205ee) 注册后账户可获得10$可使用资金，可以租用两个月的服务器 服务器端 服务器租用商： DigitalOcean 安装环境： CentOS 7 X64 安装Shadowsocks yum install python-setuptools && easy_install pip pip install shadowsocks 配置Shadowsocks nano /etc/shadowsocks.json 然后输入 { \"server\" : \"0.0.0.0\" , \"server_port\" : 8388 , \"local_address\" : \"127.0.0.1\" , \"local_port\" : 1080 , \"password\" : \"mypassword\" , \"timeout\" : 300 , \"method\" : \"aes-256-cfb\" , \"fast_open\" : false , \"workers\" : 1 } 将上面的 mypassword 替换成你的密码， server_port 也是可以修改的，例如3024，传说端口越小，效果越好，这个我没有去验证，但建议不要小于1024，以免引起不必要的麻烦， method 是加密方式，如果想在路由器上运行的话可以改成 rc4-md5 这样路由器的负荷会小一些，同时加密的安全性也不错。 ctrl+o 保存 ctrl+x 退出 上方代码的解释： 字段名 含义 server 服务端监听的地址，服务端可填写0.0.0.0 server_port 服务端的端口 local_address 本地端监听的地址 local_port 本地端的端口 password 用于加密的密码 timeout 超时时间，单位秒 method 默认 \"aes-256-cfb\"，参见加密方法 fast_open 是否使用 TCP_FASTOPEN, true / false workers worker 数量，Unix/Linux 可用，如果不理解含义请不要改 加密方法参见： https://github.com/clowwindy/shadowsocks/wiki/Encryption TCP_FASTOPEN参见： https://github.com/shadowsocks/shadowsocks/wiki/TCP-Fast-Open 测试&启动 ssserver -c /etc/shadowsocks.json 使用supervisor自动后台运行Shadowsocks easy_install supervisor 然后创建配置文件,supervisord程序在运行后会自动查找并加载此目录配置文件。 echo_supervisord_conf > /etc/supervisord.conf 编辑配置文件 supervisord.conf ， nano /etc/supervisord.conf 在后面添加 [program:shadowsocks] command = ssserver -c /etc/shadowsocks.json autostart = true autorestart = true user = nobody 完成后启动 supervisord supervisord -c /etc/supervisord.conf 设置supervisord开机启动 编辑文件： nano /etc/rc.local 在末尾另起一行添加 supervisord 保存退出（和上文类似） 另centos7还需要为rc.local添加执行权限 chmod +x /etc/rc.local 至此运用supervisord控制shadowsocks开机自启和后台运行设置完成 shadowsocks服务器TCP优化 nano /etc/sysctl.conf fs.file-max = 51200 #提高整个系统的文件限制 net.ipv4.tcp_syncookies = 1 #表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭； net.ipv4.tcp_tw_reuse = 1 #表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭； net.ipv4.tcp_tw_recycle = 0 #表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭； #为了对NAT设备更友好，建议设置为0。 net.ipv4.tcp_fin_timeout = 30 #修改系統默认的 TIMEOUT 时间。 net.ipv4.tcp_keepalive_time = 1200 #表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。 net.ipv4.ip_local_port_range = 10000 65000 #表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为10000到65000。（注意：这里不要将最低值设的太低，否则可能会占用掉正常的端口！） net.ipv4.tcp_max_syn_backlog = 8192 #表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数。 net.ipv4.tcp_max_tw_buckets = 5000 #表示系统同时保持TIME_WAIT的最大数量，如果超过这个数字，TIME_WAIT将立刻被清除并打印警告信息。 #额外的，对于内核版本新于**3.7.1**的，我们可以开启tcp_fastopen： net.ipv4.tcp_fastopen = 3 # increase TCP max buffer size settable using setsockopt() net.core.rmem_max = 67108864 net.core.wmem_max = 67108864 # increase Linux autotuning TCP buffer limit net.ipv4.tcp_rmem = 4096 87380 67108864 net.ipv4.tcp_wmem = 4096 65536 67108864 # increase the length of the processor input queue net.core.netdev_max_backlog = 250000 # recommended for hosts with jumbo frames enabled net.ipv4.tcp_mtu_probing=1 保存并退出该文件,然后使用以下指令使配置生效： sysctl -p 客户端 Shadowsocks GUI 服务端启动完成后需要配置本地端， 在此网页根据自己的系统下载最新的 Shadowsocks GUI http://sourceforge.net/projects/shadowsocksgui/files/dist/ 相关说明参见此项目的GitHub https://github.com/shadowsocks/shadowsocks-gui win版以.xz结尾，可能需要新版Winrar才能解压 客户端配置对应服务端配置 Save后可创建快捷方式放到开始菜单启动项里即可开机自动运行 SwitchySharp（插件已经更新） 在Chrome浏览器中下载插件SwitchySharp并如图配置即可使用代理访问shadowsocks，其他浏览器类似 SwitchyOmega 在Chrome浏览器中下载插件SwitchyOmega（新版的SwitchySharp，个人感觉自动规则切换更加迅速）并如图配置即可使用代理访问shadowsocks，其他浏览器类似 设置完成后点击Chrome右上角SwitchyOmega标志，当为如图所示时即为使用代理上网","tags":"tech","title":"DigitalOcean CentOS 7 配置 shadowsocks 服务端及客户端及优化"},{"url":"https://mcdona1d.me/Sublime Text 2 配置记录.html","text":"下载Sublime Text 2 官网： http://www.sublimetext.com/2 推荐使用Portable版本，配置文件跟随程序，设置好后可以随身携带，可以放在网盘里保存 或下载我设置完成后的版本，直接使用 http://download.csdn.net/detail/u010027419/8742371 破解 下载地址： http://download.csdn.net/detail/u010027419/8733229 使用方法： 打开后，先复制License里面全部内容，注意是 全部 内容， 包括---BEGIN---和---END--- 点Patch Key，去安装目录下找到sublime_text.exe，打开 然后运行Sublime Text 2，Help -> Enter License，粘贴进去 软件上方没有UNREGISTERED标志即为成功 软件不破解基本没有任何影响,只是保存的时候偶尔提示 插件 安装插件前要先安装包管理工具：Package Control 点击ctrl+~组合键，输入： import urllib2 , os ; pf = 'Package Control.sublime-package' ; ipp = sublime . installed_packages_path (); os . makedirs ( ipp ) if not os . path . exists ( ipp ) else None ; open ( os . path . join ( ipp , pf ), 'wb' ) . write ( urllib2 . urlopen ( 'http://sublime.wbond.net/' + pf . replace ( ' ' , '%20' )) . read ()) 回车，等待程序执行完毕响应之后，重启Sublime Text 2，出现下图，则配置成功 安装插件 点击菜单栏Preferences--> package control 选择 Install Package，然后即可搜索 部分插件托管于Google Code或者墙外网站，需翻墙安装 推荐插件 插件使用方法 ctrl+shift+p，然后选择相应选项 Emmet GBK Encoding Support ConvertToUTF8 Markdown Preview Terminal SublimeLinter SublimeCodeIntel JsFormat 用于格式化 javascript 的代码, 之后可以 ctrl + shift + p 找 Format: javascript 就可以了 配置 点击菜单栏Preferences--> Sittings-User { //Theme \"color_scheme\": \"Packages/Theme - Spacegray/base16-eighties.dark.tmTheme\", \"ensure_newline_at_eof_on_save\": true, \"find_selected_text\": true, //fonts \"font_face\": \"Source Code Pro\", \"font_options\": [ \"subpixel_antialias\", \"no_bold\" ], \"font_size\": 11.0, \"highlight_modified_tabs\": true, \"ignored_packages\": [ \"Vintage\" ], \"line_padding_bottom\": 0, \"line_padding_top\": 0, \"scroll_past_end\": false, \"tab_size\": 4, \"translate_tabs_to_spaces\": true, \"trim_trailing_white_space_on_save\": true } 字体 下载地址： http://download.csdn.net/detail/u010027419/8733245 Source Code Pro Consolas Ubuntu Mono 主题 SpaceGray 一个最小化的设计可以帮你把注意力放在编写代码上，该主题在 UI 上没什么吸引人之处，但很适合编码。 附录 Sublime Text 优秀插件排行 https://packagecontrol.io/browse 2014 年 9 个最佳的 Sublime Text 2/3 主题 http://www.oschina.net/news/55190/best-sublime-text-2-and-3-theme-for-2014 What are the best programming fonts? 字体推荐 http://www.slant.co/topics/67/~what-are-the-best-programming-fonts","tags":"tech","title":"Sublime Text 2 配置记录"},{"url":"https://mcdona1d.me/树莓派替我玩Timberman.html","text":"Timberman游戏规则简单，应该很轻松就能做出一套系统来实现自动化操作，况且机器毕竟是机器，依赖于算法做出的判断基本不会出错。 但是实践下来，遇到了不少问题，最终这套系统没有按照理想的情况运行下去，等将来入手性能更加强大的树莓派2之后，再重启这个小项目吧，下面简单记录一下这个小东西 项目缘由与总结 手机上的Timberman游戏被朋友挑战，无奈只能达到300多分，突发奇想做一个自动化的系统来替代人进行操作，反超朋友记录 Timberman游戏规则简单，应该很轻松就能做出一套系统来实现自动化操作，况且机器毕竟是机器，依赖于算法做出的判断基本不会出错。 但是实践下来，遇到了不少问题，最终这套系统没有按照理想的情况运行下去，原因如下 1. 树莓派处理速度不够理想，无法瞬间得出运算结果 2. 手里只有盛辉MG995型舵机，实在是大材小用，树莓派也不能很好的进行驱动，也没有单独为他购置一套设备 3. 常规电容笔的工作是依赖于传递人手的电容进行工作的 4. 准备着手准备毕业设计，这个小东西只能暂时搁置了 等将来入手性能更加强大的树莓派2之后，再重启这个小项目吧，下面简单记录一下这个小东西 设备图片 实现思路 获取图像 切割 灰度化 与标准图进行对比 判断相似度 做出响应 工具 树莓派及摄像头 一个稳定的支撑平台 Python Imaging Library 库（简称pil库） 源代码 源代码十分简单，都是直接调用pil库的函数直接运行，舵机因为硬件问题调试的不是很完美，等着以后有了新装备再来完善 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #!/usr/bin/python #coding: utf8 import math import os import operator import time import signal import atexit #import cv2.cv as cv import RPi.GPIO as GPIO from PIL import Image atexit . register ( GPIO . cleanup ) servopin = 11 GPIO . setmode ( GPIO . BOARD ) GPIO . setup ( servopin , GPIO . OUT , initial = False ) p = GPIO . PWM ( servopin , 50 ) #50HZ while ( True ): os . system ( 'fswebcam -r 320×240 -d /dev/video0 -p yuyv -S 5 /root/timberman/testpictire.jpg' ) time . sleep ( 0.5 ) takeimg = Image . open ( 'testpictire.jpg' ) #打开图片 region = ( 50 , 50 , 150 , 220 ) #设置切割接线 ctake = takeimg . crop ( region ) #切割 Lctake = ctake . convert ( 'L' ) #灰度化 Lctake . save ( 'fintest.jpg' ) standimage = Image . open ( 'Lstand.jpg' ) h1 = Lctake . histogram () h2 = standimage . histogram () rms = math . sqrt ( reduce ( operator . add , list ( map ( lambda a , b : ( a - b ) ** 2 , h1 , h2 ))) / len ( h1 ) ) if rms < 1000 : #p = GPIO.PWM(servopin,50) #50HZ p . start ( 0 ) for i in range ( 0 , 181 , 5 ): p . ChangeDutyCycle ( 2.5 + 10 * i / 180 ) #设置转动角度 time . sleep ( 0.02 ) #等该20ms周期结束 p . ChangeDutyCycle ( 0 ) #归零信号 else : #p = GPIO.PWM(servopin,50) #50HZ p . start ( 0 ) for i in range ( 181 , 0 , - 5 ): p . ChangeDutyCycle ( 2.5 + 10 * i / 180 ) #设置转动角度 time . sleep ( 0.02 ) #等该20ms周期结束 p . ChangeDutyCycle ( 0 ) #归零信号 后期需要改进项 优化代码 调整舵机可控性 针对不同场景建立大量标准图，对各个场景进行优化，增加判断准确度 提高程序运行响应速度甚至考虑通过Arduino控制将项目移植到电脑上，通过PC进行运算 研究一下如何优雅的让电容笔工作","tags":"tech","title":"树莓派替我玩Timberman"},{"url":"https://mcdona1d.me/利用Sina App Engine突破限制进行国内代理.html","text":"前言 在Google还能正常访问的时候，不少人使用Google App Engine进行代理服务，但是在Google被封杀掉之后这项服务便不能使用了，在国内，我们有BAE，SAE等祖国版服务，某些时候，我们就可以利用这写服务进行国内代理，从而实现突破内网封杀，教育网加速，甚至是隐藏ip等功能。 所需要的工具 Sina App Engine Goagent https://github.com/goagent/goagent下载最新版 资源违规CSDN不允许上传 配置过程 申请sae账号 你只需要有新浪微博帐号即可申请，申请地址：http://sae.sina.com.cn/ 使用微博登录授权，然后填写一些资料即可。 添加应用 申请成功后，进入\"我的应用\"后台列表，点击\"创建新应用\"。如下图 等待5秒后点击继续创建 分别填写二级域名，应用名称，验证码，开发语言选择PHP 5.3，创建空应用 下载Goagent到本地 下载并解压，将有server及local两个文件夹， 上传服务端到SAE 进入server文件夹的php文件夹内，将index.php的所有内容复制， 打开刚才创建的应用，点击代码管理，创建一个新版本 然后编辑代码，将刚才index.php中复制的全部代码替换本身的两行代码，保存并关闭。 设置本地客户端 找到 local 文件夹中的 proxy.ini 文件，用记事本打开编辑。最主要的是改下面的一些参数 [gae] enable = 1 appid = 123465 password = 123456 [php] enable = 1 password = 123456 crlf = 0 validate = 0 keepalive = 0 listen = 127.0.0.1:8088 fetchserver = http://xxx.sinaapp.com/index.php 你刚才建立的应用链接 hosts = 运行代理软件客户端 使用管理员身份运行 配置浏览器 依然使用SwitchyOmega的Chrome插件 具体设置与http://blog.csdn.net/u010027419/article/details/40680205中的类似 添加http代理，地址127.0.0.1，端口8088 然后即可通过sae代理服务访问网络","tags":"tech","title":"利用Sina App Engine突破限制进行国内代理"},{"url":"https://mcdona1d.me/（转载） java jsp MyEclipse 通过JDBC链接 SQLServer2012.html","text":"下面请一字一句地看，一遍就设置成功，比你设置几十遍失败，费时会少得多。 首先，在连接数据库之前必须保证SQL Server 2012是采用SQL Server身份验证方式而不是windows身份验证方式。如果在安装时选用了后者，则重新设置如下: http://blog.163.com/jackie_howe/blog/static/19949134720122261121214/ 当你保证SQL Server 2012是采用SQL Server身份验证方式后，开始如下配置： 一、因为SQL Server 2012装好后，默认协议是没有开启的，所以要打开SQL Server配置管理器中开启： 1、安装好SQL Server 2012后，运行 开始 → 所有程序 → Microsoft SQL Server 2012 → 配置工具 →SQL Server配置管理器，如下图1所示： 图1 2、打开的窗口如下图所示。在左边栏找到 SQL Server网络配置选项，点开它的小箭头，会看到\"【你的数据库名】的协议\" （图中是ERIC2012的协议），选中它，看右边栏。如下图2所示： 图2 （1）如果Named Pipes 未启用，则右键→启用 （2）右键单击 TCP/IP，选择 启用 （3）双击TCP/IP（右键→属性），在弹出的窗口中选择 \"IP地址\" 选项卡，将IP1和IP10的【IP地址】设为127.0.0.1，并将所有【IPx】的【已启用】设为是。接着，拖动下拉条到最下方，将 IPAll 中的【TCP端口】设成 【1433】，其余不变。如下图3和图4所示： 图3 图4 3、重新启动计算机。 4、接下来使用telnet命令测试1433端口是否打开。首先要保证telnet服务开启。开启win7 telnet的方法在这里： http://blog.163.com/jackie_howe/blog/static/199491347201251723939691/ 5、完成上一步后。开始菜单 → 运行cmd → 输入：telnet 127.0.0.1 1433，（注意telnet与127之间有空格，1与1433之间有空格）。如下图： 图5 6、若提示\"不能打开到主机的连接，在端口 1433: 连接失败\"，则说明1433端口没有打开，需要重新进行以上配置。若连接成功，显示如图6所示： 图6 二、环境变量CLASSPATH配置： 1、下载Microsoft JDBC Driver 4.0 for SQL Server 在这里下载：http://www.microsoft.com/zh-cn/download/details.aspx?id=11774 4.0版本支持的 SQL Server有： Microsoft®SQL Server® 2012 Microsoft®SQL Server® 2008 R2 Microsoft®SQL Server® 2008 Microsoft®SQL Server® 2005 Microsoft®SQL Azure 下载sqljdbc_4.0.2206.100_chs.tar.gz（2.2M），解压文件，得到sqljdbc.jar和sqljdbc4.jar。如果你使用的是jre1.7版本，则忽略sqljdbc.jar（因为它用不了，而且如果和sqljdbc4.jar一起用会出错），只留下sqljdbc4.jar。 以下设置均针对jre1.7版本（1.7以下应该也适用）： 在D盘新建一个文件夹，命名为sqljdbc4，将sqljdbc4.jar复制一个进去。 图7 2、右击 我的电脑 → 属性 → 高级系统设置（高级） → 环境变量，在系统变量中双击CLASSPATH变量（或选中CLASSPATH后 → 编辑），在最后面追加 \";D:\\sqljdbc4 \\sqljdbc4.jar\" （注意最前面有个 ; ）若不存在CLASSPATH，就新建CLASSPATH变量，并且将其值设为\"D:\\sqljdbc4 \\sqljdbc4.jar\"。如图8所示： 图8 3、连续点击 确定 以退出环境变量配置。 4、接下来的工作非常重要（因为没做我纠结了几天没成功）！！ 有几个地方需要注意： （1）我们需要将sqljdbc4.jar类库文件拷贝到D:\\Program Files\\Java\\jdk1.7.0\\jre\\lib\\ext目录下。（看你安装在哪个盘，如果是C盘，则最前面的D改为C，下同） （2）我们需要将sqljdbc4.jar类库文件拷贝到D:\\Program Files\\Java\\jre7\\lib\\ext目录下 最好是，只要是jre文件夹，都复制一个sqljdbc4.jar到jre7\\lib\\ext里去！！ （3）如果是使用Tomcat做服务器（我使用的是Tomcat7)，那么我们需要将sqljdbc4.jar类库文件拷贝到C:\\apache-tomcat-7.0.11\\lib目录下。 （4）如果是使用Tomcat做服务器，那么我们需要将sqljdbc4.jar类库文件拷贝到D:\\apache-tomcat-7.0.11\\webapps\\gaofei\\WEB-INF\\lib目录下（gaofei目录是我的应用，这个路径相信你会看明白） 注意，只有sqljdbc4.jar ！！如果把sqljdbc.jar和sqljdbc4.jar都拷在一起的话，这样就算你全都做对了，也会持续出现有\"此驱动程序不支持JRE1.7，请使用支持JDBC4.0的sqljdbc4.jar的类库\"的问题。因为jdk默认地选择了sqljdbc.jar（前面我已经提到，只留下sqljdbc4.jar）。 三、使用Eclipse测试连接SQL Server 2012数据库： 1、打开SQL Server 2012，在其中新建数据库 Test，然后退出SQL Server 2012。 2、运行Eclipse，新建一个Java Project 名为 Test。 3、右单击src，依次选择 Build Path → Configure Build Path，在打开的窗口的右边选择 Libraries标签，然后单击 Add External JARs，找到 sqljdbc4.jar 文件并打开，然后单击 OK 完成构建路径的配置。如图9（我是汉化版的）： 图9 4、在Test中新建包pkg，在pkg中新建一个类Main，在其中输入代码如下： packagepkg; importjava.sql.*; publicclass Main { publicstatic void main(String [] args) { StringdriverName=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"; StringdbURL=\"jdbc:sqlserver://localhost:1433;DatabaseName=你的数据库名\"; String userName=\"填写你的用户名，我的是sa\"; String userPwd=\"填写你的密码\"; try { Class.forName(driverName); ConnectiondbConn=DriverManager.getConnection(dbURL,userName,userPwd); System.out.println(\"连接数据库成功\"); } catch(Exception e) { e.printStackTrace(); System.out.print(\"连接失败\"); } } } 温馨提示：如果要对数据库中的某个表进行操作，需要像这样子做：String sql = \"SELECT FROM [数据库名].[dbo].[表名] where xxx \"; 例如String sql = \"SELECT FROM [metro].[dbo].[4] wherexxx\" 。注意，中括号是必要的，不能去掉。 5、点击右键，选择run as——>Java Application, 控制台出现下图则连接成功！ 图10","tags":"tech","title":"（转载） java jsp MyEclipse 通过JDBC链接 SQLServer2012"},{"url":"https://mcdona1d.me/跑在树莓派上智能家居雏形.html","text":"简介 一个以微信为终端的好玩的小东西 可以实现的功能 可以实现以手机微信端对树莓派终端进行实时监控、摄像头云台操纵、闯入报警、温度检测、灯光控制、自动光线控制等功能 设备图片 运行截图 需要用到的所有硬件 路由器 树莓派主板 树莓派电源（5V 2A） 至少 8g tf卡 （推荐class 10，8g足矣） 支持ouv的摄像头（罗技C170） 花生棒及电源（或用 花生壳内网版 代替） 乐高积木（小颗粒） 两根网线 温度传感器（DHT11） 光线传感器（光敏 电阻 模块） 人体红外传感器（HC-SR501） 继电器（5V低电平触发） 步进电机（28BYJ-48-5V） 步进电机驱动板（UL2003型） GPIO连接线若干 需要安装的所有软件 Windows端 Putty（0.63） WinSCP（5.1.7） Win32DiskImager（0.9.5） Notepad++ Raspberry Pi端 RASPBIAN 系统 下载链接：https://www.raspberrypi.org/downloads/ webpy python-lxml python-memcache apache2 mjpg-streamer RPI.GPIO 此程序的全部源码 源码地址： https://github.com/mcdona1d/RaspberryWechatPi 配置过程 初始化树莓派 使用Putty登陆树莓派 Username：pi Password：raspberry 获取root权限 sudo passwd root （需要输入两次你想设置的root密码） sudo passwd --unlock root 设置完成后重启Putty，以root身份登陆 释放空间及设置时区 以root身份登录后会自动弹出 raspi-config 设置工具，也可直接输入 raspi-config 调出 1. 执行第一项，一直选择ok即可 2. 选择第四项，然后选择第二项，进入时区设置 3. 分别选择Asia——Shanghai，确定，即可改为+8时区 设置静态ip sudo nano /etc/network/interfaces 把这一行 iface eth0 inet dhcp 替换为 iface eth0 inet static address 192.168.1.101 netmask 255.255.255.0 gateway 192.168.1.1 dns-nameservers 114.114.114.114 修改resolv.config文件 sudo nano /etc/resolv.conf 修改为 nameserver 114.114.114.114 否则不能解析域名 更新软件源 nano /etc/apt/sources.list 删除原文件所有内容，用以下内容取代： deb http://mirror.sysu.edu.cn/raspbian/raspbian/ wheezy main contrib non-free deb-src http://mirror.sysu.edu.cn/raspbian/raspbian/ wheezy main contrib non-free Ps：树莓派官方提供的软件源列表 http://www.raspbian.org/RaspbianMirrors Ps2：国内的几个软件源 中山大学 http://mirror.sysu.edu.cn/raspbian/raspbian/ 中国科学技术大学 http://mirrors.ustc.edu.cn/raspbian/raspbian/ 清华大学 http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ 华中科技大学 http://mirrors.hustunique.com/raspbian/raspbian/ 大连东软信息学院源（北方用户） http://mirrors.neusoft.edu.cn/raspbian/raspbian/ 重庆大学源（中西部用户） http://mirrors.cqu.edu.cn/Raspbian/raspbian/ 更新缓存并升级软件 sudo apt-get update && apt-get upgrade 安装及配置 安装所需要的所有软件，将必须的软件包安装完毕，并且调试成功 调试过程如果有问题可以参见本博客（附录）中的其他文章，或欢迎留言讨论 安装软件 webpy git clone git://github.com/webpy/webpy.git ln -s ` pwd ` /webpy/web cd /root/webpy sudo python setup.py install RPI.GPIO （安装RPI.GPIO 首先需要安装RPi.GPIO所需的Python Development Toolkit） sudo apt-get install python-dev sudo apt-get install python-pip sudo pip install rpi.gpio python-lxml sudo apt-get install python-lxml python-memcache sudo apt-get install python-memcache apache2 sudo apt-get install apache2 mjpg-streamer （安装mjpg-streamer 首先需要安装一下几个依赖包） 依赖包： sudo apt-get install subversion sudo apt-get install libv4l-dev sudo apt-get install libjpeg8-dev sudo apt-get install imagemagick （编译安装mjpg-steamer） wget http://sourceforge.net/code-snapshots/svn/m/mj/mjpg-streamer/code/mjpg-streamer-code-182.zip unzip mjpg-streamer-code-182.zip cd mjpg-streamer-code-182/mjpg-streamer make USE_LIBV4L2 = true clean all make DESTDIR = /usr install 配置路由器 在路由器设置界面内，为树莓派设置好静态ip，或者在树莓派端设置静态ip，记住此ip 配置花生棒（或 花生壳内网版 ） 如果网络环境拥有公网ip，则可以在路由器上设置ddns（ddns可以搜索其他相关文章），如果不具备此环境，则需要花生壳内网版（软件）或花生棒（硬件）来实现公网地址从而与微信公众平台对接。 首先申请一个花生壳域名，然后登陆花生棒管理端页面（http://hsk.oray.com/bang/） 选择内网映射添加映射，填入树莓派静态ip，将树莓派的80端口映射到域名上，并且 勾选使用外网80端口 （非常重要，否则无法完成对接） 申请另外一个花生壳域名，将此域名映射为树莓派的8080端口，依然 勾选使用外网80端口 Ps：关于花生壳内网版的获取，可以在 http://www.oray.com/activity/140902/?icn=oray_140902&ici=hsk_home-grid 中缴纳一元认证费开通免费级服务 花生壳内网版的设置与花生棒大同小异，需要注意的是需要如果使用花生壳内网版则在工作前需要确认花生壳内网版正常工作并能正常解析 配置apache2 因为我的80端口需要被微信公众平台占用，所以我不能让网页走80端口，需要更改端口 nano /etc/apache2/ports.conf 将 Listen 80 改为 Listen 8080 调试摄像头 运行考入树莓派中的Git包目录中testcam文件夹中的\"stream.sh\"文件： sudo chmod +x stream.sh （先编译脚本文件，才能用./filename 来运行） sudo ./stream.sh 在运行程序时，如果发生错误，可能是之前由于运行过，进程仍然在工作，导致没法再运行，可以先运行 ps -A ，查看运行中的进程和进程ID号，再使用\" kill id号 \"杀掉进程 在pc上运行Git包中的\"testcam.html\"文件，右击编辑index.html，将 树莓派ip 换成你的树莓派固定ip，保存，双击打开testcam.html 看到摄像头输出图像，说明摄像头工作正常。 申请及配置公众平台测试账号 打开页面 http://mp.weixin.qq.com/wiki/home/index.html 申请一个公共平台的测试账号 在左侧选择 测试号申请|在线调试 选择接口测试号申请 申请成功后，进入管理界面 在接口配置信息的URL处输入你在花生壳申请的域名，后面加上 /weixin Token中填上你自己喜欢的一串字母，完成后不要点击提交 （此时可以先下载我之前的微信公众平台基础模板进行对接，可以对接成功后在进行接下来的工作，以测试网络环境是否配置完毕 文章地址：http://blog.csdn.net/u010027419/article/details/40835963） 下载及配置主程序 在此Github中下载完整代码包，解压后进行编辑 （Git：https://github.com/mcdona1d/RaspberryWechatPi） 填入刚才自己设置的的Token以及测试号提供的appID和appsecret（yeekey稍后提到） 填入自己的所有传感器对应的GPIO接口 （传感器调试参考此博客（或附录）其他文章） 设置完毕之后使用WinSCP放入树莓派文件目录 使用Putty登录树莓派 在刚在文件所在目录执行 chmod +x start.sh 更改文件权限 执行 ./start.sh 如果出现如图所示信息，则程序正确运行 此时在微信公众平台测试账号的网页上点击提交，如果提示成功，则整套系统基本配置成功 部署web页面 编辑Git包中的文件中的index.html，在 你的树莓派ip 处改为树莓派的ip地址 将index.html上传到 /var/www 目录下了，替换之前的index.html 在浏览器中输入 http://你的树莓派局域网ip:8080/ 尝试一下能否访问 如果成功出现页面，则web页面部署成功 设置微信公众账号菜单 在微信公众平台管理测试账号下方选择 获取access token 在左侧菜单选择 基础接口 获取access token 在右侧最下方选择 使用网页调试工具调试该接口 首先获得access token 在appid和secret中填上之前管理测试账号页面提供的数据，点击检查问题 下方蓝色的 access_token 就是一会提交菜单要用到的 access_token ，复制此token 分别在接口类型选择 自定义菜单 和在接口列表选择 自定义菜单创建接口 。进入如下界面，填入刚才的 access_token （ access_token 具有一定的时效性，时间过长后需重新获取） 在body中填入Git包中的menu.txt内的内容，点击检查问题 若显示 Request successful 即为菜单创建成功。 Ps：取消关注微信号重新关注即可直接查看效果。否则受限于微信限制，需要24小时后缓存刷新方可查看。 Ps2： 参数说明 |参数 |是否必须 |说明| | ------------- |:-------------:|:-----| |button |是| 一级菜单数组，个数应为1~3个| |sub_button| 否 |二级菜单数组，个数应为1~5个| |type |是| 菜单的响应动作类型| |name |是| 菜单标题，不超过16个字节，子菜单不超过40个字节| |key| click等点击类型必须| 菜单KEY值，用于消息接口推送，不超过128字节| |url |view类型必须| 网页链接，用户点击菜单可打开链接，不超过256字节| 申请Yeelink物联网服务 打开 http://www.yeelink.net/ 注册账号 登陆后在管理首页上，您的API Key 即为yeekey 添加一个新设备 添加完毕后记住自己的设备ID 在程序中填入自己的设备id以及yeekey，并将附近 自己的yeelink页面 改为自己的页面 结尾&心得 接触了Python，一门非常棒的语言 学会了MarkDown写博客，太方便了 玩了树莓派 过了买东西剁手的瘾 无聊了有事情干 附录 python的微信公众平台基础代码 https://github.com/mcdona1d/Wechat-Python-Template 传感器单独调试代码 https://github.com/mcdona1d/GPIO-Sensor 树莓派，玩转微信公共平台--初级篇 http://tieba.baidu.com/p/3232803694?qq-pf-to=pcqq.discussion 树莓派，玩转微信公共平台--中级篇 http://tieba.baidu.com/p/3477722264 使用树莓派与微信公众平台对接(python) http://blog.csdn.net/u010027419/article/details/40835963 微信公众平台按钮及菜单创建 http://blog.csdn.net/u010027419/article/details/40949065 树莓派的摄像头与监控相关 http://blog.csdn.net/u010027419/article/details/41123709 树莓派通过GPIO控制步进电机(python) http://blog.csdn.net/u010027419/article/details/41518321 树莓派连接dht11温度传感器获取温度(python) http://blog.csdn.net/u010027419/article/details/41722261 树莓派架设http服务器挂载网页 http://blog.csdn.net/u010027419/article/details/42343057 html网页兼容手机浏览器（解决显示页面很小的问题） http://blog.csdn.net/u010027419/article/details/44857827","tags":"tech","title":"跑在树莓派上智能家居雏形"},{"url":"https://mcdona1d.me/html网页兼容手机浏览器（解决显示页面很小的问题）.html","text":"树莓派需要做一个实时监控的微信端网页，所以需要手机自适应的网页，终于搞定，记录一下！ 其实主要就是改掉HTML页面声明： 在网页中加入以下代码，就可以正常显示了： <meta name= \"viewport\" content= \"width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\" /> 解释： width - viewport 的宽度 height - viewport 的高度 initial-scale - 初始的缩放比例 minimum-scale - 允许用户缩放到的最小比例 maximum-scale - 允许用户缩放到的最大比例 user-scalable - 用户是否可以手动缩放 精简点的话，可以把上面的代码更改为以下代码，效果是一样的： <meta content= \"width=device-width,user-scalable=no\" name= \"viewport\" > 最后就是不要设置太大的具体宽度属性了，比如你在网页把Body的宽度属性设为1000px，这肯定是不行的了，但是可以设置为90%，这是屏幕自适应的。 优化前 优化后","tags":"tech","title":"html网页兼容手机浏览器（解决显示页面很小的问题）"},{"url":"https://mcdona1d.me/最值得安装的Chrome增强效率插件.html","text":"以下插件均为自己测试同类软件后觉得优秀的差价并且正在使用中的，如果有更好的插件，欢迎在留言下写出，谢谢 1Password: Password Manager and Secure Wallet 配合ios版的1 password使用，强大的密码管理工具，在外国饱受好评的效率工具， win平台下可以使用wifi与 iphone同步密码。 Chrome商店链接： click here AdBlock 与adblocks plus比较，感觉还是此软件更胜一筹，adblock plus是基于firefox移植过来的 Chrome商店链接： click here AutoPagerize 自动连接下一页的工具，搜google，看游民，逛论坛再也不用点击下一页了 Chrome商店链接： click here Better History 更好用的历史记录查看工具，会替代自带的历史记录 Chrome商店链接： click here Speed Dial [FVD]+ EverSync - Sync bookmarks, backup favorites 综合下来比较顺手的新标签页插件，多种功能可供定制，可以自定义或者选择喜欢的图片作为索引图片。并可 以通过EverSync将自己的设备自动备份 Speed Dial [FVD]： Chrome商店链接： click here EverSync：Chrome商店链接： click here Neater Bookmarks （暂时禁用） 一个方便的浏览书签的插件，因为牺牲美观把chrome自带的书签栏调出来了，所以暂时禁用 Chrome商店链接： click here Proxy SwitchyOmega fq必备，智能代理插件Proxy SwitchySharp的第二代，支持直接调用gfwlist做只能规则，必备插件之一，配合 shadowsocks或者Goagent使用 Chrome商店链接： click here qSnap: Screen Capture, Screenshot, Annotation 截取整个页面的插件，可以把整个页面截取并拼接成一个大的图片保存下来 Chrome商店链接： click here SimpleUndoClose 更加方便的 最近关闭的页面插件，手滑党必备 Chrome商店链接： click here Tabs Outliner 可以把正在浏览的标签页打包储存起来，方便下次继续打开观看 Chrome商店链接： click here Thunder Download Extension for Chrome 迅雷官方chrome下载插件，但是针对某些网页不是特别智能，支持 摁住ctrl点击下载链接不调用迅雷，可以设置 对某些网页不监视 Chrome商店链接： click here 什么值得买 实时推送 什么值得买的推送插件，有了优惠信息及时推送，剁手利器，官网 色魔张大妈 Chrome商店链接： click here 印象笔记·剪藏 印象笔记的chrome插件，可以从chrome直接保存下来喜欢网页的正文到你的印象笔记，手机上的微博可以使用 weico直接发送；知乎，safari等诸多程序均支持直接保存到印象笔记，效率利器 Chrome商店链接： click here 支付宝安全插件 支付宝自己安装的插件，适配chrome的安全支付插件 Chrome商店链接： click here 眼不见心不烦（新浪微博） 从接触微博了就开始用上这个插件了，微博里不再会有推广信息等广告，功能强大，可以根据自己的使用习惯定 制，有调整界面，屏蔽广告等功等 Chrome商店链接： click here","tags":"tech","title":"最值得安装的Chrome增强效率插件"},{"url":"https://mcdona1d.me/app store注册美区appid下载中国区无法下载的app.html","text":"因为对google的软件有需求但是中国区google软件所剩无几，便琢磨着转区，但是目前貌似没有特别容易的方法实现，遂直接申请美区appid appid只能在ios设备上注册，在美版apple官网网页注册下载app需提供信用卡信息 1. 在设置中注销掉当前的app store id 进入appstore，获取任意app，点击创建新的appid 选择United States，下一步 Agree Agree 填写基本注册信息，Next 填写信用卡信息，ios端注册时才会显示none，选择none，Billing Address填写美国地址，我填写的一个转运公司的地址 附：转运中国收货地址 注册完成，可以在app store登陆下载美区app了","tags":"tech","title":"app store注册美区appid下载中国区无法下载的app"},{"url":"https://mcdona1d.me/基于mt7620的newifi y1的Pandorabox新软件源备忘.html","text":"在 系统——软件包——配置 中替换掉之前的软件源，旧软件源已失效 dest root / dest ram /tmp lists_dir ext /var/opkg-lists option overlay_root /overlay arch all 100 arch ralink 200 arch ramips 300 arch ramips_24kec 400 src/gz 14.09_base http://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/packages/base/ src/gz 14.09_management http://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/packages/management src/gz 14.09_oldpackages http://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/packages/oldpackages src/gz 14.09_packages http://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/packages/packages src/gz 14.09_routing http://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/packages/routing src/gz 14.09_telephony http://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/packages/telephony 软件包更新命令： opkg update","tags":"tech","title":"基于mt7620的newifi y1的Pandorabox新软件源备忘"},{"url":"https://mcdona1d.me/Newifi Y1 刷openwrt Pandorabox并 实现透明路由.html","text":"刷机参考另外一篇博文 HG255d 刷最新openwrt Pandorabox并安装njit拨号 先刷uboot，后刷固件 Newifi Y1固件下载地址：http://downloads.openwrt.org.cn/PandoraBox/Lenovo-Y1_RY-1S/ 将手里的newifi刷成openwrt之后发现自带shadowsocks插件，并且这一版的pandorabox已经是稳定版，5g的问题也得到了解决，下面就说一下如何实现透明路由 ChinaDNS-C设置 勾选启动，其它默认 检查DNS设置 查看是否已经填写好DNS转发 下载host文件 下载https://raw.githubusercontent.com/vokins/simpleu/master/hosts改名为block.hosts，用winscp上传到/etc/目录，作用是通过解析host文件屏蔽掉国外网站广告服务器 或者直接下载此文件http://download.csdn.net/detail/u010027419/8421187 切换到HOSTS和解析文件，勾选忽略解析文件，填写额外HOSTS文件位置 Shadowsocks配置 设置账户，打开透明代理，将chinaDNS 的中国路由表粘贴（国内网段不走Shadowsocks）,端口随意，不要和DNS重复 通过以上设置，实现国外ip走Shadowsocks通道，并且没有广告，国内ip直连，从而实现透明路由","tags":"tech","title":"Newifi Y1 刷openwrt Pandorabox并 实现透明路由"},{"url":"https://mcdona1d.me/紫光m300 路由器与磊科ni360 q360 nr235 ddwrt tomato等互刷折腾备忘.html","text":"之前帮紫光卓云的人测试njit插件，送了一台紫光的m300路由器，测试结束之后这台路由器便放着吃灰了，简单的搜过这台路由器的折腾，但是因为太小众了也没有人玩。今天索性就把路由拆了，看到处理器是博通的bcm5357,8m flash 64 ram。正巧和磊科和腾讯合作的q3以及和360合作的ni360是一模一样的硬件，然后就搜集好资料开始折腾了。 通常路由器都有恢复界面，按住reset开机，发现进入紫光自己的恢复界面，查询资料发现，这个界面不是传统的u-boot，这个界面叫miniweb。先刷附件中的两个cfe.bin文件 刷写cfe 电脑ip设置为192.168.1.2 255.255.255.0 192.168.1.1，连接路由器lan2口 将cfe.bin，tftpd32.exe置于一个文件夹中，在系统功能里开启tftp客户端，服务端两个功能。打开tftpd32，禁用掉多余的网卡，选择好cfe所在文件夹，暂时不用 捅住reset开机，开机后松开reset，浏览器清空缓存，进入192.168.1.1 进入紫光的miniweb之后，先点击reset nvram，回到之前的miniweb后，在浏览器内输入 http://192.168.1.1/do.htm?cmd=flash+-noheader+192.168.1.2:ddcfe.bin+flash0.boot 后回车，如看到complete字样，即为升级miniweb成功 升级成功后重新进入miniweb，发现界面出现变化，则成功 刷入q3固件 刷写q3固件需要用到tftp智能刷机软件， 选择好附件中的q3.bin，勾选智能刷机。 将路由器电源断开，重新插上 tftp自动开始刷机，刷写完成后输入192.168.1.1即可进入q3路由器设置界面 ps： 磊科路由器默认用户名密码 guest guest ps：刷写ddwrt及不能web直接升级的固件以及救砖同理使用tftp刷机 web固件互刷 进入q3设置界面的固件升级，即可对照附件中的文件互刷固件，文件已整理好上传到此地址： http://download.csdn.net/detail/u010027419/8413235 http://download.csdn.net/detail/u010027419/8413215 http://download.csdn.net/detail/u010027419/8413245 http://download.csdn.net/detail/u010027419/8413209 （四个文件下载后一起解压） 附： q3 ni360可刷固件列表（理论m300亦可） 磊科：Q3、NI360、NR236W、NR235W、NR235W（单WAN多拨）、WF2409、WF2471 腾达：W3000R、N300 斐讯：FIR302B Tomato：Tomato RAF+、Tomato-Shibby、Tomato MultiWAN（独舞）、海蜘蛛、Solarsys、wifidog OpenWrt：OpenWrt（没有无线） DD-WRT：DD-WRT（要刷cfe） 多拨叠加：NR236W、NR235W（单WAN多拨）、Tomato MultiWAN（独舞） 无线中继：WF2409、WF2471、W3000R、N300、DD-WRT 智能QoS：NR235W、Tomato RAF+ 认证营销：海蜘蛛、Solarsys 科学上网：Tomato-Shibby、DD-WRT 安全无聊：Q3、NI360、FIR302B、OpenWrt（没有无线） 参考资料： 磊科NI360 Q3刷DD-WRT的简单教程 http://www.anywlan.com/article-4263-1.html 不拆机刷CFE，不用TTL，秒刷路由器固件 ！（绝对经典） http://forum.anywlan.com/thread-200804-1-1.html Q3 WEB刷机包 Q3 NI360 WEB互刷NR235W NR236W固件集合 W3000R 海蜘蛛 TT WF2409 http://forum.anywlan.com/thread-279086-1-1.html 10个磊科 Q3/Ni360 可刷固件[新增OpenWrt] http://www.right.com.cn/forum/thread-135732-1-1.html 新手入手磊科Q3刷DD-WRT的简单教程 http://forum.anywlan.com/thread-285987-1-1.html?_dsign=841a98be","tags":"tech","title":"紫光m300 路由器与磊科ni360 q360 nr235 ddwrt tomato等互刷折腾备忘"},{"url":"https://mcdona1d.me/树莓派架设http服务器挂载网页.html","text":"需要在树莓派上挂在一个小型的网页测试用，比较方便 因为有之前架设Wordpress的经验，在树莓派上就简单许多 我们要用到的软件就是 apache2 安装apache2 sudo apt-get install apache2 配置 因为我的80端口被微信公众平台占着，所以我不能让网页走80端口，需要更改端口 nano /etc/apache2/ports.conf 将 Listen 80 改为 Listen 8080 重启服务 service apache2 restart 然后就可以在浏览器上先测试一下，输入http://你的树莓派局域网ip:8080/尝试一下能否访问了 如果显示一下界面，apache2就正常工作了 接下来我们就可以把我们想要挂在的网页上传到 /var/www 目录下了，替换 index.html 有时间把在 DigitalOcean 上搭建 Wordpress 的总结写出来跟大家分享","tags":"tech","title":"树莓派架设http服务器挂载网页"},{"url":"https://mcdona1d.me/Ubuntu使用Shadowsocks client 客户端 总结.html","text":"在被shadowsocks.cn上的几个程序折磨的半死还没有配置好程序后，索性换了一个思路，在shadowsocks的github上找到了shadowsocks的gui程序 下面是程序的下载地址：http://sourceforge.net/projects/shadowsocksgui/files/dist/ 下载 shadowsocks-gui-0.6.4-linux-x64.tar.xz (23.9 MB) 文件 下载后解压，使用终端执行 start.sh 文件 随后出现和win版的gui界面一样的界面，输入自己的配置，可以参考我的另外一片博文，点击Save，配置完成 进入ubuntu的设置，网络，网络代理，方法选择手动，在socks主机后边填上127.0.0.1，后边填写端口（默认1080），点击应用到整个系统即可开启全局代理","tags":"tech","title":"Ubuntu使用Shadowsocks client 客户端 总结"},{"url":"https://mcdona1d.me/超级好用的vim配置记录.html","text":"本来想自己定制属于自己的vim，但是发现了直接就能使用的相当好的vim版本，所以暂时先不写了，贴上文章的链接 http://www.cnblogs.com/ma6174/archive/2011/12/10/2283393.html fork 作者把配置好的vim托管到Github上了，地址是： https://github.com/ma6174/vim 简易安装方法： 打开终端，执行下面的命令就自动安装好了： wget -qO- https://raw.github.com/ma6174/vim/master/setup.sh | sh 常用设置 设定默认解码 set fenc=utf-8 set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936 显示行号 set nu 不要使用vi的键盘模式，而是vim自己的 set nocompatible history文件中需要记录的行数 set history=100 在处理未保存或只读文件的时候，弹出确认 set confirm 与windows共享剪贴板 set clipboard+=unnamed 侦测文件类型 filetype on 载入文件类型插件 filetype plugin on 为特定文件类型载入相关缩进文件 filetype indent on 保存全局变量 set viminfo+=! 带有如下符号的单词不要被换行分割 set iskeyword+=_,$,@,%,#,- 语法高亮 syntax on 高亮字符，让其不受100列限制 :highlight OverLength ctermbg=red ctermfg=white guibg=red guifg=white :match OverLength '\\%101v.*' 状态行颜色 highlight StatusLine guifg=SlateBlue guibg=Yellow highlight StatusLineNC guifg=Gray guibg=White","tags":"tech","title":"超级好用的vim配置记录"},{"url":"https://mcdona1d.me/（转载）树莓派连接dht11温度传感器获取温度(python).html","text":"参考原文地址：http://www.cnblogs.com/colipso/p/3535901.html # -*- coding: utf-8 -*- import RPi.GPIO as gpio import time PORT = 13 #使用的树莓派的PIN13也就是GPIO27，根据自己连接位置更改此参数 gpio . setwarnings ( False ) gpio . setmode ( gpio . BOARD ) time . sleep ( 1 ) data = [] def delay ( i ): #20*i usdelay a = 0 for j in range ( i ): a + 1 j = 0 #start work gpio . setup ( PORT , gpio . OUT ) gpio . output ( PORT , gpio . LOW ) time . sleep ( 0.02 ) gpio . output ( PORT , gpio . HIGH ) i = 1 #wait to response gpio . setup ( PORT , gpio . IN ) while gpio . input ( PORT ) == 1 : continue while gpio . input ( PORT ) == 0 : continue while gpio . input ( PORT ) == 1 : continue #get data while j < 40 : k = 0 while gpio . input ( PORT ) == 0 : continue while gpio . input ( PORT ) == 1 : k += 1 if k > 100 : break if k < 3 : data . append ( 0 ) else : data . append ( 1 ) j += 1 #get temperature humidity_bit = data [ 0 : 8 ] humidity_point_bit = data [ 8 : 16 ] temperature_bit = data [ 16 : 24 ] temperature_point_bit = data [ 24 : 32 ] check_bit = data [ 32 : 40 ] humidity = 0 humidity_point = 0 temperature = 0 temperature_point = 0 check = 0 for i in range ( 8 ): humidity += humidity_bit [ i ] * 2 ** ( 7 - i ) humidity_point += humidity_point_bit [ i ] * 2 ** ( 7 - i ) temperature += temperature_bit [ i ] * 2 ** ( 7 - i ) temperature_point += temperature_point_bit [ i ] * 2 ** ( 7 - i ) check += check_bit [ i ] * 2 ** ( 7 - i ) tmp = humidity + humidity_point + temperature + temperature_point if check == tmp : print \"temperature is \" , temperature , \"wet is \" , humidity , \"%\" else : print \"something is worong the humidity,humidity_point,temperature,temperature_point,check is\" , humidity , humidity_point , temperature , temperature_point , check","tags":"tech","title":"（转载）树莓派连接dht11温度传感器获取温度(python)"},{"url":"https://mcdona1d.me/树莓派经常用到的软件及安装方法备忘.html","text":"Clone GitHub库的程序 sudo apt-get install git-core 安装 web.py git clone git://github.com/webpy/webpy.git ln -s ` pwd ` /webpy/web cd /root/webpy `` sudo python setup.py install 安装 python-lxml sudo apt-get install python-lxml 安装 python-memcache sudo apt-get install python-memcache 安装RPI.GPIO （首先需要安装RPi.GPIO所需的Python Development toolkit） sudo apt-get install python-dev sudo apt-get install python-pip sudo pip install rpi.gpio 重装vi编辑器 sudo apt-get removevim-common sudo apt-get install vim","tags":"tech","title":"树莓派经常用到的软件及安装方法备忘"},{"url":"https://mcdona1d.me/树莓派通过GPIO控制步进电机(python).html","text":"步进电机的驱动程序一样是让我费了好大力气才使他正常工作，在代码上走了不少弯路 树莓派不建议直接使用舵机，虽然舵机方便，而且仅需要一根信号线，不过需要舒服pwm信号，而新版的b+板子已经没有了物理的pwm信号口，只能用软件模拟，配置起来比较复杂，为了简便可以使用步进电机代替 使用步进电机需要步进电机和步进电机驱动板两样东西，我使用的电机和驱动板型号分别为 28BYJ-48-5V 和 UL2003 芯片的五线四相步进电机驱动板 首先说明步进电机的驱动原理 驱动板上有IN1, IN2, IN3, IN4四个接口，根据资料得知这四个接口依次设置为低电平就可以驱动，我们分别用杜邦线将GPIO 21（Pin 40），GPIO 20（Pin 38）, GPIO 16（Pin 36）, GPIO 19（Pin 35）和IN1，IN2，IN3，IN4一一相连。 每次将四个GPIO端口按下表依次设置好电平后，可以sleep几十毫秒来控制转速 |序列 |GPIO 21 |GPIO 20| GPIO 16 |GPIO 19| |:--:|:--:|:--:|:--:|:--:| |0 |LOW| HIGH| HIGH |HIGH| |1 |HIGH |LOW| HIGH |HIGH| |2 |HIGH |HIGH |LOW |HIGH| |3 |HIGH |HIGH |HIGH |LOW| |4 |LOW |HIGH |HIGH |HIGH| 示例代码： #!/usr/bin/python #coding: utf8 import RPi.GPIO as GPIO import time import sys from array import * GPIO . setwarnings ( False ) GPIO . setmode ( GPIO . BOARD ) steps = int ( sys . argv [ 1 ]); clockwise = int ( sys . argv [ 2 ]); arr = [ 0 , 1 , 2 , 3 ]; if clockwise != 1 : arr = [ 3 , 2 , 1 , 0 ]; ports = [ 40 , 38 , 36 , 35 ] # GPIO 21（Pin 40） GPIO 20（Pin 38） GPIO 16（Pin 36） GPIO 19（Pin 35） for p in ports : GPIO . setup ( p , GPIO . OUT ) for x in range ( 0 , steps ): for j in arr : time . sleep ( 0.01 ) for i in range ( 0 , 4 ): if i == j : GPIO . output ( ports [ i ], True ) else : GPIO . output ( ports [ i ], False ) 执行 python motor.py 90 0 可以顺时针转动大约80度。 执行 python motor.py 90 1 则可逆时针转动大约80度。 如果看到步进电机动了，至少说明他工作了，，，我之前就是感觉到有信号输入但是却死活不动。。。 参考原文：http://hugozhu.myalert.info/2013/03/16/03-16-use-raspberry-pi-control-step-motor-rotate-webcam.html （网上各种资料各种转载，一定要找原版看，要不然可能会格式不正确或者缺少好多东西，我之前就是参考了转载的源码走了不少的弯路！）","tags":"tech","title":"树莓派通过GPIO控制步进电机(python)"},{"url":"https://mcdona1d.me/HG255d 刷最新openwrt Pandorabox并安装njit拨号.html","text":"本文用到的固件bin和njit插件 http://download.csdn.net/detail/u010027419/8197369 固件并非最新版本，最新版本存在兼容问题。更新版本可在http://downloads.openwrt.org.cn/PandoraBox/HuaWei_HG255D/自行查看 pandorabox为openwrt定制版固件，集成常用软件包，方便使用 刷openwrt 下载好固件之后，将路由器多余的线拔掉，关闭路由，只留路由的lan口和电脑的连线及电源线，本人一般常用的是lan3口，之后将电脑的无线断掉，防止干扰，并且将有线的ip设置成如图 捅住reset口，打开电源，，五秒后放开reset，若路由器power灯常量，则进入刷机模式。在浏览器中输入192.168.1.1进入刷机界面 重要提示 ，如果无法进入或提示404或如图所示自己跳转到http://192.168.1.1/cgi-bin/luci页面，则需要清除页面缓存，或者更换浏览器进行 路由器刷新完成后会自动重启，具体时间不一定，请一定耐心等候。刷机完成后路由会自动重启 等系统重新启动完成后输入192.168.1.1进入路由界面，刷机完成 ps:默认用户名密码 root/admin 安装inode拨号程序 此程序为基于njit定制版，理论支持代替5.2以下（不包含5.2）的所有inode拨号 5.2以上版本会出现无法连接或者连上后不停掉线等不确定问题 编辑 /etc/opkg.conf 在末尾加上 arch all 100 arch ralink 200 arch ramips 300 arch ramips_24kec 300 或直接讲附件中的 opkg.conf 将其替换 使用winscp将附件中的两个ipk复制到路由根目录下 进入根目录 执行 opkg install libpcap_1.1.1-2_ramips.ipk opkg install luci-app-x3c8021x_0.11+svn9957-1_ramips.ipk 安装完成后重启路由器 点击网络-接口-修改wan口设置 配置ip为你的申请的ip，并将其余参数设置完成，点击保存，点高级设置，将mac克隆成绑定的mac，勾选开机自动运行。点击保存&应用 点击网络-H3C校园网络认证根据实际情况设置好自己的参数，（此处wan口为eth2.2，视情况而定）点击保存&应用。 将物理的线路接好，重启路由器，配置正确的话此时应该已经可以上网。","tags":"tech","title":"HG255d 刷最新openwrt Pandorabox并安装njit拨号"},{"url":"https://mcdona1d.me/使用Screen后台执行任务，防止SSH中断.html","text":"Screen，虚拟终端管理器。可以在后台管理终端界面，防止SSH断开以后任务停止运行 安装： sudo apt-get install screen 使用： 创建虚拟终端， 使用putty登录树莓派后执行 screen -S terminal1 这样即可创建一个名为terminal1的终端 此时便可以随意执行操作 例如执行 sudo apt-get upgrade ，或者其它消耗时间比较长的工作，像编译内核等等。 按ctrl+a后再按d保存虚拟终端，系统提示deatached即为保存成功 接下来可以断开SSH终端，虚拟终端仍会执行 访问已经创建好的终端 screen -ls 列出已经创建的正在后台运行的终端 screen -r xxx 进入终端 例如 screen -r terminal1 彻底退出 screen -r 进入终端后执行 exit 即可完全退出","tags":"tech","title":"使用Screen后台执行任务，防止SSH中断"},{"url":"https://mcdona1d.me/树莓派的摄像头与监控相关.html","text":"此文中实用的脚本下载链接 http://download.csdn.net/detail/u010027419/8186201 将USB摄像头插上，查看是否找到设备， 输入： lsusb 其中Logitech就是摄像头，说明找到usb设备了，然后再看看设备驱动是否正常： ls /dev/vid* /dev/video0 看到video0说明驱动正常，如果找不到可能驱动不对，或者工作不正常，尝试调整供电，或者安装驱动 安装必要的软件集： sudo apt-get install subversion sudo apt-get install libv4l-dev sudo apt-get install libjpeg8-dev sudo apt-get install imagemagick 下载mipg-steamer软件，编译并安装： wget http://sourceforge.net/code-snapshots/svn/m/mj/mjpg-streamer/code/mjpg-streamer-code-182.zip unzip mjpg-streamer-code-182.zip（本人下载完后文件名是mjpg-streamer-code-182.zip.1） cd mjpg-streamer-code-182/mjpg-streamer make USE_LIBV4L2 = true clean all make DESTDIR = /usr install 运行 运行考入树莓派中的源程序目录中的\"stream.sh\"文件： pi@raspberrypi:/home/camtank# sudo chmod 777 stream.sh pi@raspberrypi:/home/camtank# sudo ./stream.sh 在运行程序时，如果发生错误，可能是之前由于运行过，进程仍然在工作，导致没法再运行，可以先运行 ps -A ，查看运行中的进程和进程ID号，再使用 kill 2470 杀掉进程 在pc上运行源程序目录中的\"index.html\"文件，右击编辑index.html，将树莓派的地址换成你的树莓派ip，保存双击打开index.html 看到视频了，就说明摄像头工作正常了，到此摄像头的工作就结束了 另外将html中的地址换成 http://<树莓派IP>:8001/?action=snapshot 就可以看到静态的图像 使用fswebcam截图 安装fswebcam sudo apt-get install fswebcam 使用fswebcam fswebcam -d /dev/video0 -r 640x480 -p JPEG -S 5 -D 1 /home/pi/test.jpg 摄像头截图 设备分辨率 格式 忽略5帧 延时一秒 输出地址文件名 scrot-t 40% -q 80 screen.jpg 屏幕截图 40%大小缩略图图片质量80 输出图片","tags":"tech","title":"树莓派的摄像头与监控相关"},{"url":"https://mcdona1d.me/微信公众平台按钮及菜单创建.html","text":"在微信公众平台管理测试账号下方选择会话界面自定义菜单 在界面底部找到使用网页调试工具调试该接口 首先获得access_token 在appid和secret中填上之前管理测试账号页面提供的数据，点击检查问题 下方的access_token就是一会提交菜单要用到的access_token 分别选择接口类型和接口列表。进入如下界面 在access_token中输入刚才得到的access_token， 在body中输入刚才微信公众平台开发者文档中的例子 { \"button\" :[ { \"type\" : \"click\" , \"name\" : \"今日歌曲\" , \"key\" : \"V1001_TODAY_MUSIC\" }, { \"name\" : \"菜单\" , \"sub_button\" :[ { \"type\" : \"view\" , \"name\" : \"搜索\" , \"url\" : \"http://www.soso.com/\" }, { \"type\" : \"view\" , \"name\" : \"视频\" , \"url\" : \"http://v.qq.com/\" }, { \"type\" : \"click\" , \"name\" : \"赞一下我们\" , \"key\" : \"V1001_GOOD\" }] }] } 点击检查问题 如果显示： 即为菜单 创建成功 。 取消关注微信号重新关注即可直接查看效果。否则受限于微信限制，需要24小时后缓存刷新方可查看。 其他新增按钮类型的请求示例 { \"button\" : [ { \"name\" : \"扫码\" , \"sub_button\" : [ { \"type\" : \"scancode_waitmsg\" , \"name\" : \"扫码带提示\" , \"key\" : \"rselfmenu_0_0\" , \"sub_button\" : [ ] }, { \"type\" : \"scancode_push\" , \"name\" : \"扫码推事件\" , \"key\" : \"rselfmenu_0_1\" , \"sub_button\" : [ ] } ] }, { \"name\" : \"发图\" , \"sub_button\" : [ { \"type\" : \"pic_sysphoto\" , \"name\" : \"系统拍照发图\" , \"key\" : \"rselfmenu_1_0\" , \"sub_button\" : [ ] }, { \"type\" : \"pic_photo_or_album\" , \"name\" : \"拍照或者相册发图\" , \"key\" : \"rselfmenu_1_1\" , \"sub_button\" : [ ] }, { \"type\" : \"pic_weixin\" , \"name\" : \"微信相册发图\" , \"key\" : \"rselfmenu_1_2\" , \"sub_button\" : [ ] } ] }, { \"name\" : \"发送位置\" , \"type\" : \"location_select\" , \"key\" : \"rselfmenu_2_0\" } ] } 参数说明 参数 是否必须 说明 button 是 一级菜单数组，个数应为1~3个 sub_button 否 二级菜单数组，个数应为1~5个 type 是 菜单的响应动作类型 name 是 菜单标题，不超过16个字节，子菜单不超过40个字节 key click等点击类型必须 菜单KEY值，用于消息接口推送，不超过128字节 url view类型必须 网页链接，用户点击菜单可打开链接，不超过256字节","tags":"tech","title":"微信公众平台按钮及菜单创建"},{"url":"https://mcdona1d.me/使用树莓派与微信公众平台对接(python).html","text":"在网上参阅众多教程之后，均无法找到可直接在树莓派上运行的python微信平台对接模板。 参阅http://my.oschina.net/yangyanxing/blog/159215此博客的基于sae微信平台教程后，略微修改，可以在树莓派上完美运行， 下面是此模板的Github链接 https://github.com/mcdona1d/Wechat-Python-Template 使用方法： 将此文件夹放到树莓派中，更改 index.py 中的your_token为你的token 在文件夹目录内，输入命令执行：sudo python index.py 80 80为绑定到80端口上，微信公众平台目前仅支持80端口 Ps:如果无法执行，可能需要更改文件权限： chmod +x index.py 需要安装webpy和python-lxml git clone git://github.com/webpy/webpy.git ln -s ` pwd ` /webpy/web cd /root/webpy sudo python setup.py install sudo apt-get install python-lxml 正确运行的效果 程序正确执行后，在微信公众平台的接口配置界面分别输入你的ip或者域名及Token： http://你的ip或域名/weixin 然后输入刚才配置程序时更改的自己的 token 点击提交，提示配置成功。 在微信上对此公众平台测试号发送消息，微信可以返回你发送的消息。 至此，微信平台与树莓派的对接结束 参考教程：http://my.oschina.net/yangyanxing/blog/159215","tags":"tech","title":"使用树莓派与微信公众平台对接(python)"},{"url":"https://mcdona1d.me/（转载）Digital Ocean使用SSH Key登录.html","text":"我的邀请注册链接：https://www.digitalocean.com/?refcode=69cda22205ee 注册后账户可获得10￥可使用资金 原帖地址：https://www.zxc.so/do-ssh-key.html 创建SSH Key 第一步，打开PuTTY Key Generator，Parameters选择SSH-2 RSA，点击Generate。（如图一） 然后软件会显示Please generate some randomness by moving mouse over the blank area，意思是用鼠标在软件区域内随意移动来生成随机的密钥（如图二） 随后公钥（存放在服务器用于验证私钥）和密钥（如与公钥匹配则可通过认证）都生成成功了，首先复制上方的公钥代码（如图三蓝色区域），注意：复制完千万不要关闭窗口 上传SSH Key 接下来登录DigitalOcean的控制面板，进入SSH Keys选项卡，点击Add SSH Key（如图四） 进入添加界面后为Key取个名字，然后将刚刚复制的公钥（Public Key）粘贴到下方的输入框，点击CREATE SSH KEY（如图五） 注意： 添加的SSH Key只能用于新创建的Droplet的root用户，对于已创建的Droplet或者其他用户的，我以后会写文章说明。 随后点击最顶部的CREATE（如图六） 在填好Droplet的各项信息之后，在Add optional SSH Keys的选项选择你刚刚创建的那个SSH Key（如图七） 注意：使用SSH Key新建的Droplet不会发送root密码，建议用Key登录之后使用passwd命令修改root密码（密码强度建议：长度24位以上，大小写字母，数字，特殊符号混合），以备不时之需（如Key不在身旁等等） 然后回到PuTTY Key Generator的界面，点击下方的Save private key，选择路径保存你的私钥，然后就能使用SSH Key登录VPS了！（如图八），注意：不要保存在公用电脑上，任何持有私钥的人都能合法登录VPS。 PuTTY使用SSH Key登录VPS流程 首先打开PuTTY软件，输入root@服务器IP和端口（一般为22），然后点击SSH》Auth（如图九） 然后在Private key file for authentication选项选择你的SSH私钥的路径（后缀为.ppk）（如图十）。然后记得回到登陆页点击Default Settings》Save保存设置 然后点击Open就能自动登录了，全程自动化，完全不需要输入任何东西。（图十一为登录成功界面） WinSCP使用SSH Key登录VPS流程 WinSCP是像FTP一样使用SSH管理文件的软件，配置方法和PuTTY大同小异，而且下面的图也标注的很清楚，我也就不再一一赘叙了。 图十二：WinSCP登录账号配置 图十三：WinSCP选择SSH Key 图十四：WinSCP使用SSH Key成功登录","tags":"tech","title":"（转载）Digital Ocean使用SSH Key登录"},{"url":"https://mcdona1d.me/树莓派初始化及网络、软件源、中文相关设置.html","text":"获取root权限 sudo passwd root sudo passwd --unlock root 设置静态ip sudo nano /etc/network/interfaces 把这一行 iface eth0 inet dhcp 替换为 iface eth0 inet static address 192.168.1.101 netmask 255.255.255.0 gateway 192.168.1.1 dns-nameservers 114.114.114.114 修改resolv.config文件 sudo nano /etc/resolv.conf nameserver 114.114.114.114 否则不能解析域名 如果你要设置的是无线网卡的，那么除了把 wlan0 的 dhcp 改成static 之外，还需要填写无线网的名称和密码，编辑后的结果大概如下： iface wlan0 inet static wpa-ssidYour_Wifi_SSID wpa-pskYour_Wifi_Password address 192.168.1.200 # 设定的静态IP地址 netmask 255.255.255.0 # 网络掩码 gateway 192.168.1.1 # 网关 network 192.168.1.1 # 网络地址 #wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf Ctrl+O 保存 Ctrl+X 退出 重启网络生效或reboot重启系统 service networking start 更新软件源 nano /etc/apt/sources.list 删除原文件所有内容，用以下内容取代： deb http://mirror.sysu.edu.cn/raspbian/raspbian/ wheezy main contrib non-free deb-src http://mirror.sysu.edu.cn/raspbian/raspbian/ wheezy main contrib non-free Ps：树莓派官方提供的软件源列表http://www.raspbian.org/RaspbianMirrors Ps2：国内的几个软件源 中山大学 http://mirror.sysu.edu.cn/raspbian/raspbian/ 中国科学技术大学 http://mirrors.ustc.edu.cn/raspbian/raspbian/ 清华大学 http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ 华中科技大学 http://mirrors.hustunique.com/raspbian/raspbian/ 大连东软信息学院源（北方用户） http://mirrors.neusoft.edu.cn/raspbian/raspbian/ 重庆大学源（中西部用户） http://mirrors.cqu.edu.cn/Raspbian/raspbian/ 更新缓存并升级软件 sudo apt-get update && apt-get upgrade 安装软件 sudo apt-get install * 安装远程桌面 sudo apt-get install xrdp 安装VNC sudo apt-get install tightvncserver 配置VNC vncserver 或者 /usr/bin/tightvncserver -depth 16 -geometry 10242x768 :1 //设置颜色深度为16（如果设置32,则连接后看到一片空白），后面是屏幕分辨率，你可以自己设置，1是显示编号。 给VNCVIWEWE的端口是5900+N，N就是树莓派启动vncserver时设置的display号 正确的写法是IP加端口号，但是这边的端口号不是设置的5900，而是在5900基础上加上虚拟机中的VNC序号，如第一张图中显示的2。正确写法是IP：5902 （如我的机子填写 192.168.0.101:5902） 树莓派的中文相关 执行 sudo raspi-config 操作提示：按空格键在前面打勾或去掉勾（星号=勾），PageUp PageDown快速翻页，Tab键跳到OK按钮上 去掉en_GB.UTF-8 UTF-8 勾上：\"en_US.UTF-8 UTF-8\"、\"zh_CN.UTF-8 UTF-8\"、\"zh_CN.GBK GBK\" 下一屏幕默认语言选zh_CN.UTF-8。 这里选择的默认语言会用于：桌面环境、命令行程序的--help帮助等 安装中文字体\"文泉驿正黑\" sudo apt-get -y install ttf-wqy-zenhe 中文输入法 sudo apt-get -y install scim-pinyin 重启生效","tags":"tech","title":"树莓派初始化及网络、软件源、中文相关设置"}]}